default namespace = "http://www.tei-c.org/ns/1.0"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.isocat.org/ns/dcr"
namespace ns2 = "http://gams.uni-graz.at/rem/ns/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace s = "http://www.ascc.net/xml/schematron"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2014-11-01T16:11:33Z. 
# Edition: Version 2.7.0. Last updated on
#	16th September 2014, revision 13036
# Edition Location: http://www.tei-c.org/Vault/P5/Version 2.7.0/
#

#
rem_macro.paraContent =
  (text
   | rem_model.gLike
   | rem_model.phrase
   | rem_model.inter
   | rem_model.global
   | rem_lg)*
rem_macro.limitedContent =
  (text | rem_model.limitedPhrase | rem_model.inter)*
rem_macro.phraseSeq =
  (text | rem_model.gLike | rem_model.phrase | rem_model.global)*
rem_macro.phraseSeq.limited =
  (text | rem_model.limitedPhrase | rem_model.global)*
rem_macro.specialPara =
  (text
   | rem_model.gLike
   | rem_model.phrase
   | rem_model.inter
   | rem_model.divPart
   | rem_model.global)*
rem_macro.xtext = (text | rem_model.gLike)*
rem_data.certainty = "high" | "medium" | "low" | "unknown"
rem_data.probability =
  xsd:double { minInclusive = "0" maxInclusive = "1" }
rem_data.numeric =
  xsd:double
  | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
  | xsd:decimal
rem_data.interval =
  xsd:float { minExclusive = "0" }
  | "regular"
  | "irregular"
  | "unknown"
rem_data.count = xsd:nonNegativeInteger
rem_data.temporal.w3c =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
rem_data.truthValue = xsd:boolean
rem_data.xTruthValue = xsd:boolean | "unknown" | "inapplicable"
rem_data.language = xsd:language | ""
rem_data.namespace = xsd:anyURI
rem_data.outputMeasurement =
  xsd:token {
    pattern =
      "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
  }
rem_data.pattern = xsd:token
rem_data.point =
  xsd:token { pattern = "(\-?[0-9]+\.?[0-9]*,\-?[0-9]+\.?[0-9]*)" }
rem_data.pointer = xsd:anyURI
rem_data.version = xsd:token { pattern = "[\d]+(\.[\d]+){0,2}" }
rem_data.versionNumber =
  xsd:token { pattern = "[\d]+[a-z]*[\d]*(\.[\d]+[a-z]*[\d]*){0,3}" }
rem_data.replacement = text
rem_data.word = xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})+" }
rem_data.sex = rem_data.word
rem_data.text = xsd:string
rem_data.name = xsd:Name
rem_data.enumerated = rem_data.name
rem_data.temporal.iso =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
  | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
rem_att.ascribed.attributes = rem_att.ascribed.attribute.who
rem_att.ascribed.attribute.who =
  
  ## indicates the person, or group of people, to whom the element content is ascribed.
  attribute who {
    list { rem_data.pointer+ }
  }?
rem_att.canonical.attributes =
  rem_att.canonical.attribute.key, rem_att.canonical.attribute.ref
rem_att.canonical.attribute.key =
  
  ## provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind.
  attribute key { rem_data.text }?
rem_att.canonical.attribute.ref =
  
  ## (reference) provides an explicit means of locating a full definition for the entity being named by means of one or more URIs.
  attribute ref {
    list { rem_data.pointer+ }
  }?
rem_att.ranging.attributes =
  rem_att.ranging.attribute.atLeast,
  rem_att.ranging.attribute.atMost,
  rem_att.ranging.attribute.min,
  rem_att.ranging.attribute.max,
  rem_att.ranging.attribute.confidence
rem_att.ranging.attribute.atLeast =
  
  ## gives a minimum estimated value for the approximate measurement.
  attribute atLeast { rem_data.numeric }?
rem_att.ranging.attribute.atMost =
  
  ## gives a maximum estimated value for the approximate measurement.
  attribute atMost { rem_data.numeric }?
rem_att.ranging.attribute.min =
  
  ## where the measurement summarizes more than one observation or a range, supplies the minimum value observed.
  attribute min { rem_data.numeric }?
rem_att.ranging.attribute.max =
  
  ## where the measurement summarizes more than one observation or a range, supplies the maximum value observed.
  attribute max { rem_data.numeric }?
rem_att.ranging.attribute.confidence =
  
  ## specifies the degree of statistical confidence (between zero and one) that a value falls within the range specified by min and max, or the proportion of observed values that fall within that range.
  attribute confidence { rem_data.probability }?
rem_att.dimensions.attributes =
  rem_att.ranging.attributes,
  rem_att.dimensions.attribute.unit,
  rem_att.dimensions.attribute.quantity,
  rem_att.dimensions.attribute.extent,
  rem_att.dimensions.attribute.precision,
  rem_att.dimensions.attribute.scope
rem_att.dimensions.attribute.unit =
  
  ## names the unit used for the measurement
  ## Empfohlene Werte sind: 1] cm(centimetres) ; 2] mm(millimetres) ; 3] in(inches) ; 4] lines; 5] chars(characters) 
  attribute unit {
    
    ## (centimetres) 
    "cm"
    | 
      ## (millimetres) 
      "mm"
    | 
      ## (inches) 
      "in"
    | 
      ## lines of text
      "lines"
    | 
      ## (characters) characters of text
      "chars"
    | xsd:Name
  }?
rem_att.dimensions.attribute.quantity =
  
  ## specifies the length in the units specified
  attribute quantity { rem_data.numeric }?
rem_att.dimensions.attribute.extent =
  
  ## indicates the size of the object concerned using a project-specific vocabulary combining quantity and units in a single string of words.
  attribute extent { rem_data.text }?
rem_att.dimensions.attribute.precision =
  
  ## characterizes the precision of the values specified by the other attributes.
  attribute precision { rem_data.certainty }?
rem_att.dimensions.attribute.scope =
  
  ## where the measurement summarizes more than one observation, specifies the applicability of this measurement.
  ## Beispielwerte sind etwa: 1] all; 2] most; 3] range
  attribute scope { rem_data.enumerated }?
rem_att.damaged.attributes =
  rem_att.dimensions.attributes,
  rem_att.damaged.attribute.hand,
  rem_att.damaged.attribute.agent,
  rem_att.damaged.attribute.degree,
  rem_att.damaged.attribute.group
rem_att.damaged.attribute.hand =
  
  ## in the case of damage (deliberate defacement, inking out, etc.) assignable to a distinct hand, signifies the hand responsible for the damage by pointing to one of the hand identifiers declared in the document header (see section ).
  attribute hand { rem_data.pointer }?
rem_att.damaged.attribute.agent =
  
  ## categorizes the cause of the damage, if it can be identified.
  ## Beispielwerte sind etwa: 1] rubbing; 2] mildew; 3] smoke
  attribute agent { rem_data.enumerated }?
rem_att.damaged.attribute.degree =
  
  ## provides a coded representation of the degree of damage, either as a number between 0 (undamaged) and 1 (very extensively damaged), or as one of the codes high, medium, low, or unknown. The damage element with the degree attribute should only be used where the text may be read with some confidence; text supplied from other sources should be tagged as supplied.
  attribute degree { rem_data.probability | rem_data.certainty }?
rem_att.damaged.attribute.group =
  
  ## assigns an arbitrary number to each stretch of damage regarded as forming part of the same physical phenomenon.
  attribute group { rem_data.count }?
rem_att.breaking.attributes = rem_att.breaking.attribute.break
rem_att.breaking.attribute.break =
  
  ## indicates whether or not the element bearing this attribute should be considered to mark the end of an orthographic token in the same way as whitespace.
  attribute break { rem_data.enumerated }?
rem_att.cReferencing.attributes = rem_att.cReferencing.attribute.cRef
rem_att.cReferencing.attribute.cRef =
  
  ## (canonical reference) specifies the destination of the pointer by supplying a canonical reference expressed using the scheme defined in a refsDecl element in the TEI header
  attribute cRef { rem_data.text }?
rem_att.datable.w3c.attributes =
  rem_att.datable.w3c.attribute.when,
  rem_att.datable.w3c.attribute.notBefore,
  rem_att.datable.w3c.attribute.notAfter,
  rem_att.datable.w3c.attribute.from,
  rem_att.datable.w3c.attribute.to
rem_att.datable.w3c.attribute.when =
  
  ## supplies the value of the date or time in a standard form, e.g. yyyy-mm-dd.
  attribute when { rem_data.temporal.w3c }?
rem_att.datable.w3c.attribute.notBefore =
  
  ## specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notBefore { rem_data.temporal.w3c }?
rem_att.datable.w3c.attribute.notAfter =
  
  ## specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notAfter { rem_data.temporal.w3c }?
rem_att.datable.w3c.attribute.from =
  
  ## indicates the starting point of the period in standard form, e.g. yyyy-mm-dd.
  attribute from { rem_data.temporal.w3c }?
rem_att.datable.w3c.attribute.to =
  
  ## indicates the ending point of the period in standard form, e.g. yyyy-mm-dd.
  attribute to { rem_data.temporal.w3c }?
rem_att.datable.attributes =
  rem_att.datable.w3c.attributes,
  rem_att.datable.iso.attributes,
  rem_att.datable.custom.attributes,
  rem_att.datable.attribute.calendar,
  rem_att.datable.attribute.period
rem_att.datable.attribute.calendar =
  
  ## indicates the system or calendar to which the date represented by the content of this element belongs.
  attribute calendar { rem_data.pointer }?
sch:pattern [
  id = "rem-basel-att.datable-calendar-calendar-constraint-1"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@calendar]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "string-length(.) gt 0"
      "\x{a}" ~
      "@calendar indicates the system or calendar to which the date represented by the content of this element\x{a}" ~
      "belongs, but this "
      sch:name [ ]
      " element has no textual content."
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
rem_att.datable.attribute.period =
  
  ## supplies a pointer to some location defining a named period of time within which the datable item is understood to have occurred.
  attribute period { rem_data.pointer }?
rem_att.datcat.attributes =
  rem_att.datcat.attribute.datcat, rem_att.datcat.attribute.valueDatcat
rem_att.datcat.attribute.datcat =
  
  ## contains a PID (persistent identifier) that aligns the given element with the appropriate Data Category (or categories) in ISOcat.
  attribute ns1:datcat {
    list { rem_data.pointer+ }
  }?
rem_att.datcat.attribute.valueDatcat =
  
  ## contains a PID (persistent identifier) that aligns the content of the given element or the value of the given attribute with the appropriate simple Data Category (or categories) in ISOcat.
  attribute ns1:valueDatcat {
    list { rem_data.pointer+ }
  }?
rem_att.declarable.attributes = rem_att.declarable.attribute.default
rem_att.declarable.attribute.default =
  
  ## indicates whether or not this element is selected by default when its parent is selected.
  [ a:defaultValue = "false" ]
  attribute default {
    
    ## This element is selected if its parent is selected
    "true"
    | 
      ## This element can only be selected explicitly, unless it is the only one of its kind, in which case it is selected if its parent is selected.
      "false"
  }?
rem_att.declaring.attributes = rem_att.declaring.attribute.decls
rem_att.declaring.attribute.decls =
  
  ## identifies one or more declarable elements within the header, which are understood to apply to the element bearing this attribute and its content.
  attribute decls {
    list { rem_data.pointer+ }
  }?
rem_att.fragmentable.attributes = rem_att.fragmentable.attribute.part
rem_att.fragmentable.attribute.part =
  
  ## specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers.
  [ a:defaultValue = "N" ]
  attribute part {
    
    ## (yes) the element is fragmented in some (unspecified) respect
    "Y"
    | 
      ## (no) either the element is not fragmented, or no claim is made as to its completeness.
      "N"
    | 
      ## (initial) this is the initial part of a fragmented element
      "I"
    | 
      ## (medial) this is a medial part of a fragmented element
      "M"
    | 
      ## (final) this is the final part of a fragmented element
      "F"
  }?
rem_att.divLike.attributes =
  rem_att.fragmentable.attributes,
  rem_att.divLike.attribute.org,
  rem_att.divLike.attribute.sample
rem_att.divLike.attribute.org =
  
  ## (organization) specifies how the content of the division is organized.
  [ a:defaultValue = "uniform" ]
  attribute org {
    
    ## no claim is made about the sequence in which the immediate contents of this division are to be processed, or their inter-relationships.
    "composite"
    | 
      ## the immediate contents of this element are regarded as forming a logical unit, to be processed in sequence.
      "uniform"
  }?
rem_att.divLike.attribute.sample =
  
  ## indicates whether this division is a sample of the original source and if so, from which part.
  [ a:defaultValue = "complete" ]
  attribute sample {
    
    ## division lacks material present at end in source.
    "initial"
    | 
      ## division lacks material at start and end.
      "medial"
    | 
      ## division lacks material at start.
      "final"
    | 
      ## position of sampled material within original unknown.
      "unknown"
    | 
      ## division is not a sample.
      "complete"
  }?
rem_att.docStatus.attributes = rem_att.docStatus.attribute.status
rem_att.docStatus.attribute.status =
  
  ## describes the status of a document either currently or, when associated with a dated element, at the time indicated.
  ## Beispielwerte sind etwa: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn
  [ a:defaultValue = "draft" ] attribute status { rem_data.enumerated }?
rem_att.responsibility.attributes =
  rem_att.source.attributes,
  rem_att.responsibility.attribute.cert,
  rem_att.responsibility.attribute.resp
rem_att.responsibility.attribute.cert =
  
  ## (certainty) signifies the degree of certainty associated with the intervention or interpretation.
  attribute cert { rem_data.certainty }?
rem_att.responsibility.attribute.resp =
  
  ## (responsible party) indicates the agency responsible for the intervention or interpretation, for example an editor or transcriber.
  attribute resp {
    list { rem_data.pointer+ }
  }?
rem_att.editLike.attributes =
  rem_att.dimensions.attributes,
  rem_att.responsibility.attributes,
  rem_att.editLike.attribute.evidence,
  rem_att.editLike.attribute.instant
rem_att.editLike.attribute.evidence =
  
  ## indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation.
  ## Empfohlene Werte sind: 1] internal; 2] external; 3] conjecture
  attribute evidence {
    list {
      (
       ## there is internal evidence to support the intervention.
       "internal"
       | 
         ## there is external evidence to support the intervention.
         "external"
       | 
         ## the intervention or interpretation has been made by the editor, cataloguer, or scholar on the basis of their expertise.
         "conjecture"
       | xsd:Name)+
    }
  }?
rem_att.editLike.attribute.instant =
  
  ## indicates whether this is an instant revision or not.
  [ a:defaultValue = "false" ]
  attribute instant { rem_data.xTruthValue }?
rem_att.global.attributes =
  rem_att.global.linking.attributes,
  rem_att.global.analytic.attributes,
  rem_att.global.facs.attributes,
  rem_att.global.change.attributes,
  rem_att.global.attribute.xmlid,
  rem_att.global.attribute.n,
  rem_att.global.attribute.xmllang,
  rem_att.global.attribute.rend,
  rem_att.global.attribute.style,
  rem_att.global.attribute.rendition,
  rem_att.global.attribute.xmlbase,
  rem_att.global.attribute.xmlspace
rem_att.global.attribute.xmlid =
  
  ## (identifier) provides a unique identifier for the element bearing the attribute.
  attribute xml:id { xsd:ID }?
rem_att.global.attribute.n =
  
  ## (number) gives a number (or other label) for an element, which is not necessarily unique within the document.
  attribute n { rem_data.text }?
rem_att.global.attribute.xmllang =
  
  ## (language) indicates the language of the element content using a tag generated according to BCP 47.
  attribute xml:lang { rem_data.language }?
rem_att.global.attribute.rend =
  
  ## (rendition) indicates how the element in question was rendered or presented in the source text.
  attribute rend {
    list { rem_data.word+ }
  }?
rem_att.global.attribute.style =
  
  ## contains an expression in some formal style definition language which defines the rendering or presentation used for this element in the source text
  attribute style { rem_data.text }?
rem_att.global.attribute.rendition =
  
  ## points to a description of the rendering or presentation used for this element in the source text.
  attribute rendition {
    list { rem_data.pointer+ }
  }?
rem_att.global.attribute.xmlbase =
  
  ## provides a base URI reference with which applications can resolve relative URI references into absolute URI references.
  attribute xml:base { rem_data.pointer }?
rem_att.global.attribute.xmlspace =
  
  ## signals an intention about how white space should be managed by applications.
  attribute xml:space {
    
    ## signals that the application's default white-space processing modes are acceptable
    "default"
    | 
      ## indicates the intent that applications preserve all white space
      "preserve"
  }?
rem_att.handFeatures.attributes =
  rem_att.handFeatures.attribute.scribe,
  rem_att.handFeatures.attribute.scribeRef,
  rem_att.handFeatures.attribute.script,
  rem_att.handFeatures.attribute.scriptRef,
  rem_att.handFeatures.attribute.medium,
  rem_att.handFeatures.attribute.scope
rem_att.handFeatures.attribute.scribe =
  
  ## gives a name or other identifier for the scribe believed to be responsible for this hand.
  attribute scribe { rem_data.name }?
rem_att.handFeatures.attribute.scribeRef =
  
  ## points to a full description of the scribe concerned, typically supplied by a person element elsewhere in the description.
  attribute scribeRef {
    list { rem_data.pointer+ }
  }?
rem_att.handFeatures.attribute.script =
  
  ## characterizes the particular script or writing style used by this hand, for example secretary, copperplate, Chancery, Italian, etc.
  attribute script {
    list { rem_data.name+ }
  }?
rem_att.handFeatures.attribute.scriptRef =
  
  ## points to a full description of the script or writing style used by this hand, typically supplied by a scriptNote element elsewhere in the description.
  attribute scriptRef {
    list { rem_data.pointer+ }
  }?
rem_att.handFeatures.attribute.medium =
  
  ## describes the tint or type of ink, e.g. brown, or other writing medium, e.g. pencil
  attribute medium {
    list { rem_data.enumerated+ }
  }?
rem_att.handFeatures.attribute.scope =
  
  ## specifies how widely this hand is used in the manuscript.
  attribute scope {
    
    ## only this hand is used throughout the manuscript
    "sole"
    | 
      ## this hand is used through most of the manuscript
      "major"
    | 
      ## this hand is used occasionally in the manuscript
      "minor"
  }?
rem_att.internetMedia.attributes =
  rem_att.internetMedia.attribute.mimeType
rem_att.internetMedia.attribute.mimeType =
  
  ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
  attribute mimeType {
    list { rem_data.word+ }
  }?
rem_att.media.attributes =
  rem_att.internetMedia.attributes,
  rem_att.media.attribute.width,
  rem_att.media.attribute.height,
  rem_att.media.attribute.scale
rem_att.media.attribute.width =
  
  ## Where the media are displayed, indicates the display width
  attribute width { rem_data.outputMeasurement }?
rem_att.media.attribute.height =
  
  ## Where the media are displayed, indicates the display height
  attribute height { rem_data.outputMeasurement }?
rem_att.media.attribute.scale =
  
  ## Where the media are displayed, indicates a scale factor to be applied when generating the desired display size
  attribute scale { rem_data.numeric }?
rem_att.resourced.attributes = rem_att.resourced.attribute.url
rem_att.resourced.attribute.url =
  
  ## (uniform resource locator) specifies the URL from which the media concerned may be obtained.
  attribute url { rem_data.pointer }
rem_att.interpLike.attributes =
  rem_att.responsibility.attributes,
  rem_att.interpLike.attribute.type,
  rem_att.interpLike.attribute.inst
rem_att.interpLike.attribute.type =
  
  ## indicates what kind of phenomenon is being noted in the passage.
  ## Beispielwerte sind etwa: 1] image; 2] character; 3] theme; 4] allusion
  attribute type { rem_data.enumerated }?
rem_att.interpLike.attribute.inst =
  
  ## (instances) points to instances of the analysis or interpretation represented by the current element.
  attribute inst {
    list { rem_data.pointer+ }
  }?
rem_att.measurement.attributes =
  rem_att.measurement.attribute.unit,
  rem_att.measurement.attribute.quantity,
  rem_att.measurement.attribute.commodity
rem_att.measurement.attribute.unit =
  
  ## indicates the units used for the measurement, usually using the standard symbol for the desired units.
  ## Empfohlene Werte sind: 1] m(metre) ; 2] kg(kilogram) ; 3] s(second) ; 4] Hz(hertz) ; 5] Pa(pascal) ; 6] Ω(ohm) ; 7] L(litre) ; 8] t(tonne) ; 9] ha(hectare) ; 10] Å(ångström) ; 11] mL(millilitre) ; 12] cm(centimetre) ; 13] dB(decibel) ; 14] kbit(kilobit) ; 15] Kibit(kibibit) ; 16] kB(kilobyte) ; 17] KiB(kibibyte) ; 18] MB(megabyte) ; 19] MiB(mebibyte) 
  attribute unit {
    
    ## (metre) SI base unit of length
    "m"
    | 
      ## (kilogram) SI base unit of mass
      "kg"
    | 
      ## (second) SI base unit of time
      "s"
    | 
      ## (hertz) SI unit of frequency
      "Hz"
    | 
      ## (pascal) SI unit of pressure or stress
      "Pa"
    | 
      ## (ohm) SI unit of electric resistance
      "Ω"
    | 
      ## (litre) 1 dm³
      "L"
    | 
      ## (tonne) 10³ kg
      "t"
    | 
      ## (hectare) 1 hm²
      "ha"
    | 
      ## (ångström) 10⁻¹⁰ m
      "Å"
    | 
      ## (millilitre) 
      "mL"
    | 
      ## (centimetre) 
      "cm"
    | 
      ## (decibel) see remarks, below
      "dB"
    | 
      ## (kilobit) 10³ or 1000 bits
      "kbit"
    | 
      ## (kibibit) 2¹⁰ or 1024 bits
      "Kibit"
    | 
      ## (kilobyte) 10³ or 1000 bytes
      "kB"
    | 
      ## (kibibyte) 2¹⁰ or 1024 bytes
      "KiB"
    | 
      ## (megabyte) 10⁶ or 1 000 000 bytes
      "MB"
    | 
      ## (mebibyte) 2²⁰ or 1 048 576 bytes
      "MiB"
    | xsd:Name
  }?
rem_att.measurement.attribute.quantity =
  
  ## specifies the number of the specified units that comprise the measurement
  attribute quantity { rem_data.numeric }?
rem_att.measurement.attribute.commodity =
  
  ## indicates the substance that is being measured
  attribute commodity {
    list { rem_data.word+ }
  }?
rem_att.naming.attributes =
  rem_att.canonical.attributes,
  rem_att.naming.attribute.role,
  rem_att.naming.attribute.nymRef
rem_att.naming.attribute.role =
  
  ## may be used to specify further information about the entity referenced by this name in the form of a set of whitespace-separated values, for example the occupation of a person, or the status of a place.
  attribute role {
    list { rem_data.enumerated+ }
  }?
rem_att.naming.attribute.nymRef =
  
  ## (reference to the canonical name) provides a means of locating the canonical form (nym) of the names associated with the object named by the element bearing it.
  attribute nymRef {
    list { rem_data.pointer+ }
  }?
rem_att.placement.attributes = rem_att.placement.attribute.place
rem_att.placement.attribute.place =
  
  ## specifies where this item is placed
  ## Empfohlene Werte sind: 1] below; 2] bottom; 3] margin; 4] top; 5] opposite; 6] overleaf; 7] above; 8] end; 9] inline; 10] inspace
  attribute place {
    list {
      (
       ## below the line
       "below"
       | 
         ## at the foot of the page
         "bottom"
       | 
         ## in the margin (left, right, or both)
         "margin"
       | 
         ## at the top of the page
         "top"
       | 
         ## on the opposite, i.e. facing, page
         "opposite"
       | 
         ## on the other side of the leaf
         "overleaf"
       | 
         ## above the line
         "above"
       | 
         ## at the end of e.g. chapter or volume.
         "end"
       | 
         ## within the body of the text.
         "inline"
       | 
         ## in a predefined space, for example left by an earlier scribe.
         "inspace"
       | xsd:Name)+
    }
  }?
rem_att.typed.attributes =
  rem_att.typed.attribute.type, rem_att.typed.attribute.subtype
rem_att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient classification scheme or typology.
  attribute type { rem_data.enumerated }?
rem_att.typed.attribute.subtype =
  
  ## provides a sub-categorization of the element, if needed
  attribute subtype { rem_data.enumerated }?
sch:pattern [
  id = "rem-basel-att.typed-subtypeTyped-constraint-2"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "*[@subtype]"
    "\x{a}" ~
    "        "
    sch:assert [
      test = "@type"
      "The "
      sch:name [ ]
      " element should not be categorized in detail with @subtype\x{a}" ~
      " unless also categorized in general with @type"
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
rem_att.pointing.attributes =
  rem_att.pointing.attribute.targetLang,
  rem_att.pointing.attribute.target,
  rem_att.pointing.attribute.evaluate
rem_att.pointing.attribute.targetLang =
  
  ## specifies the language of the content to be found at the destination referenced by target, using a language tag generated according to BCP 47.
  attribute targetLang { rem_data.language }?
sch:pattern [
  id = "rem-basel-att.pointing-targetLang-targetLang-constraint-3"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[not(self::tei:schemaSpec)][@targetLang]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "count(@target)"
      "@targetLang can only be used if @target is specified."
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
rem_att.pointing.attribute.target =
  
  ## specifies the destination of the reference by supplying one or more URI References
  attribute target {
    list { rem_data.pointer+ }
  }?
rem_att.pointing.attribute.evaluate =
  
  ## specifies the intended meaning when the target of a pointer is itself a pointer.
  attribute evaluate {
    
    ## if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.
    "all"
    | 
      ## if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.
      "one"
    | 
      ## no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.
      "none"
  }?
rem_att.pointing.group.attributes =
  rem_att.pointing.attributes,
  rem_att.typed.attributes,
  rem_att.pointing.group.attribute.domains,
  rem_att.pointing.group.attribute.targFunc
rem_att.pointing.group.attribute.domains =
  
  ## optionally specifies the identifiers of the elements within which all elements indicated by the contents of this element lie.
  attribute domains {
    list { rem_data.pointer, rem_data.pointer, rem_data.pointer* }
  }?
rem_att.pointing.group.attribute.targFunc =
  
  ## (target function) describes the function of each of the values of the target attribute of the enclosed link, join, or alt tags.
  attribute targFunc {
    list { rem_data.word, rem_data.word, rem_data.word* }
  }?
rem_att.scoping.attributes =
  rem_att.scoping.attribute.target, rem_att.scoping.attribute.match
rem_att.scoping.attribute.target =
  
  ## points at one or several elements or sets of elements by means of one or more data pointers, using the URI syntax.
  attribute target {
    list { rem_data.pointer+ }
  }?
rem_att.scoping.attribute.match =
  
  ## supplies an arbitrary XPath expression using the syntax defined in  which identifies a set of nodes, selected within the context identified by the target attribute if this is supplied, or within the context of the element bearing this attribute if it is not.
  attribute match { text }?
rem_att.segLike.attributes =
  rem_att.datcat.attributes,
  rem_att.fragmentable.attributes,
  rem_att.segLike.attribute.function
rem_att.segLike.attribute.function =
  
  ## characterizes the function of the segment.
  attribute function { rem_data.enumerated }?
rem_att.sortable.attributes = rem_att.sortable.attribute.sortKey
rem_att.sortable.attribute.sortKey =
  
  ## supplies the sort key for this element in an index, list or group which contains it.
  attribute sortKey { rem_data.word }?
rem_att.edition.attributes =
  rem_att.edition.attribute.ed, rem_att.edition.attribute.edRef
rem_att.edition.attribute.ed =
  
  ## (edition) supplies a sigil or other arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute ed {
    list { rem_data.word+ }
  }?
rem_att.edition.attribute.edRef =
  
  ## (edition reference) provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute edRef {
    list { rem_data.pointer+ }
  }?
rem_att.spanning.attributes = rem_att.spanning.attribute.spanTo
rem_att.spanning.attribute.spanTo =
  
  ## indicates the end of a span initiated by the element bearing this attribute.
  attribute spanTo { rem_data.pointer }?
sch:pattern [
  id = "rem-basel-att.spanning-spanTo-spanTo-2-constraint-4"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@spanTo]"
    "\x{a}" ~
    "            "
    sch:assert [
      test =
        "id(substring(@spanTo,2)) and following::*[@xml:id=substring(current()/@spanTo,2)]"
      "\x{a}" ~
      "The element indicated by @spanTo ("
      sch:value-of [ select = "@spanTo" ]
      ") must follow the current element "
      sch:name [ ]
      "\x{a}" ~
      "                  "
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
rem_att.styleDef.attributes =
  rem_att.styleDef.attribute.scheme,
  rem_att.styleDef.attribute.schemeVersion
rem_att.styleDef.attribute.scheme =
  
  ## identifies the language used to describe the rendition.
  attribute scheme {
    
    ## Cascading Stylesheet Language
    "css"
    | 
      ## Extensible Stylesheet Language Formatting Objects
      "xslfo"
    | 
      ## Informal free text description
      "free"
    | 
      ## A user-defined rendition description language
      "other"
  }?
rem_att.styleDef.attribute.schemeVersion =
  
  ## supplies a version number for the style language provided in scheme.
  attribute schemeVersion { rem_data.versionNumber }?
sch:pattern [
  id =
    "rem-basel-att.styleDef-schemeVersion-schemeVersionRequiresScheme-constraint-5"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "tei:*[@schemeVersion]"
    "\x{a}" ~
    "            "
    sch:assert [
      test = "@scheme and not(@scheme = 'free')"
      "\x{a}" ~
      "              @schemeVersion can only be used if @scheme is specified.\x{a}" ~
      "            "
    ]
    "\x{a}" ~
    "          "
  ]
  "\x{a}" ~
  "   "
]
rem_att.tableDecoration.attributes =
  rem_att.tableDecoration.attribute.role,
  rem_att.tableDecoration.attribute.rows,
  rem_att.tableDecoration.attribute.cols
rem_att.tableDecoration.attribute.role =
  
  ## indicates the kind of information held in this cell or in each cell of this row.
  ## Empfohlene Werte sind: 1] label; 2] data
  [ a:defaultValue = "data" ]
  attribute role {
    
    ## labelling or descriptive information only.
    "label"
    | 
      ## data values.
      "data"
    | xsd:Name
  }?
rem_att.tableDecoration.attribute.rows =
  
  ## indicates the number of rows occupied by this cell or row.
  [ a:defaultValue = "1" ] attribute rows { rem_data.count }?
rem_att.tableDecoration.attribute.cols =
  
  ## (columns) indicates the number of columns occupied by this cell or row.
  [ a:defaultValue = "1" ] attribute cols { rem_data.count }?
rem_att.timed.attributes =
  rem_att.timed.attribute.start, rem_att.timed.attribute.end
rem_att.timed.attribute.start =
  
  ## indicates the location within a temporal alignment at which this element begins.
  attribute start { rem_data.pointer }?
rem_att.timed.attribute.end =
  
  ## indicates the location within a temporal alignment at which this element ends.
  attribute end { rem_data.pointer }?
rem_att.transcriptional.attributes =
  rem_att.editLike.attributes,
  rem_att.transcriptional.attribute.hand,
  rem_att.transcriptional.attribute.status,
  rem_att.transcriptional.attribute.cause,
  rem_att.transcriptional.attribute.seq
rem_att.transcriptional.attribute.hand =
  
  ## indicates the hand of the agent which made the intervention.
  attribute hand { rem_data.pointer }?
rem_att.transcriptional.attribute.status =
  
  ## indicates the effect of the intervention, for example in the case of a deletion, strikeouts which include too much or too little text, or in the case of an addition, an insertion which duplicates some of the text already present.
  ## Beispielwerte sind etwa: 1] duplicate; 2] duplicate-partial; 3] excessStart; 4] excessEnd; 5] shortStart; 6] shortEnd; 7] partial; 8] unremarkable
  [ a:defaultValue = "unremarkable" ]
  attribute status { rem_data.enumerated }?
rem_att.transcriptional.attribute.cause =
  
  ## documents the presumed cause for the intervention.
  attribute cause {
    
    ## repeated for the purpose of fixation
    "fix"
    | 
      ## repeated to clarify a previously illegible or badly written text or mark
      "unclear"
  }?
rem_att.transcriptional.attribute.seq =
  
  ## (sequence) assigns a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.
  attribute seq { rem_data.count }?
rem_att.translatable.attributes =
  rem_att.translatable.attribute.versionDate
rem_att.translatable.attribute.versionDate =
  
  ## specifies the date on which the source text was extracted and sent to the translator
  attribute versionDate { rem_data.temporal.w3c }?
rem_att.citing.attributes =
  rem_att.citing.attribute.unit,
  rem_att.citing.attribute.from,
  rem_att.citing.attribute.to
rem_att.citing.attribute.unit =
  
  ## identifies the unit of information conveyed by the element, e.g. columns, pages, volume.
  ## Empfohlene Werte sind: 1] volume; 2] issue; 3] page; 4] line; 5] chapter; 6] part; 7] column
  attribute unit {
    
    ## the element contains a volume number.
    "volume"
    | 
      ## the element contains an issue number, or volume and issue numbers.
      "issue"
    | 
      ## the element contains a page number or page range.
      "page"
    | 
      ## the element contains a line number or line range.
      "line"
    | 
      ## the element contains a chapter indication (number and/or title)
      "chapter"
    | 
      ## the element identifies a part of a book or collection.
      "part"
    | 
      ## the element identifies a column.
      "column"
    | xsd:Name
  }?
rem_att.citing.attribute.from =
  
  ## specifies the starting point of the range of units indicated by the unit attribute.
  attribute from { rem_data.word }?
rem_att.citing.attribute.to =
  
  ## specifies the end-point of the range of units indicated by the unit attribute.
  attribute to { rem_data.word }?
rem_model.nameLike.agent = rem_name | rem_orgName | rem_persName
rem_model.nameLike.agent_alternation =
  rem_name | rem_orgName | rem_persName
rem_model.nameLike.agent_sequence = rem_name, rem_orgName, rem_persName
rem_model.nameLike.agent_sequenceOptional =
  rem_name?, rem_orgName?, rem_persName?
rem_model.nameLike.agent_sequenceOptionalRepeatable =
  rem_name*, rem_orgName*, rem_persName*
rem_model.nameLike.agent_sequenceRepeatable =
  rem_name+, rem_orgName+, rem_persName+
rem_model.segLike =
  rem_s
  | rem_cl
  | rem_phr
  | rem_w
  | rem_m
  | rem_c
  | rem_pc
  | rem_seg
  | rem_price
rem_model.hiLike = rem_hi
rem_model.hiLike_alternation = rem_hi
rem_model.hiLike_sequence = rem_hi
rem_model.hiLike_sequenceOptional = rem_hi?
rem_model.hiLike_sequenceOptionalRepeatable = rem_hi*
rem_model.hiLike_sequenceRepeatable = rem_hi+
rem_model.emphLike =
  rem_foreign
  | rem_emph
  | rem_distinct
  | rem_mentioned
  | rem_soCalled
  | rem_gloss
  | rem_term
  | rem_title
  | rem_sup
rem_model.emphLike_alternation =
  rem_foreign
  | rem_emph
  | rem_distinct
  | rem_mentioned
  | rem_soCalled
  | rem_gloss
  | rem_term
  | rem_title
  | rem_sup
rem_model.emphLike_sequence =
  rem_foreign,
  rem_emph,
  rem_distinct,
  rem_mentioned,
  rem_soCalled,
  rem_gloss,
  rem_term,
  rem_title,
  rem_sup
rem_model.emphLike_sequenceOptional =
  rem_foreign?,
  rem_emph?,
  rem_distinct?,
  rem_mentioned?,
  rem_soCalled?,
  rem_gloss?,
  rem_term?,
  rem_title?,
  rem_sup?
rem_model.emphLike_sequenceOptionalRepeatable =
  rem_foreign*,
  rem_emph*,
  rem_distinct*,
  rem_mentioned*,
  rem_soCalled*,
  rem_gloss*,
  rem_term*,
  rem_title*,
  rem_sup*
rem_model.emphLike_sequenceRepeatable =
  rem_foreign+,
  rem_emph+,
  rem_distinct+,
  rem_mentioned+,
  rem_soCalled+,
  rem_gloss+,
  rem_term+,
  rem_title+,
  rem_sup+
rem_model.highlighted = rem_model.hiLike | rem_model.emphLike
rem_model.dateLike = rem_date | rem_time
rem_model.dateLike_alternation = rem_date | rem_time
rem_model.dateLike_sequence = rem_date, rem_time
rem_model.dateLike_sequenceOptional = rem_date?, rem_time?
rem_model.dateLike_sequenceOptionalRepeatable = rem_date*, rem_time*
rem_model.dateLike_sequenceRepeatable = rem_date+, rem_time+
rem_model.dimLike = rem_height | rem_depth | rem_width
rem_model.measureLike =
  rem_num
  | rem_measure
  | rem_measureGrp
  | rem_geo
  | rem_dim
  | rem_height
  | rem_depth
  | rem_width
  | rem_d
  | rem_lbd
  | rem_wä
  | rem_sh
rem_model.measureLike_alternation =
  rem_num
  | rem_measure
  | rem_measureGrp
  | rem_geo
  | rem_dim
  | rem_height
  | rem_depth
  | rem_width
  | rem_d
  | rem_lbd
  | rem_wä
  | rem_sh
rem_model.measureLike_sequence =
  rem_num,
  rem_measure,
  rem_measureGrp,
  rem_geo,
  rem_dim,
  rem_height,
  rem_depth,
  rem_width,
  rem_d,
  rem_lbd,
  rem_wä,
  rem_sh
rem_model.measureLike_sequenceOptional =
  rem_num?,
  rem_measure?,
  rem_measureGrp?,
  rem_geo?,
  rem_dim?,
  rem_height?,
  rem_depth?,
  rem_width?,
  rem_d?,
  rem_lbd?,
  rem_wä?,
  rem_sh?
rem_model.measureLike_sequenceOptionalRepeatable =
  rem_num*,
  rem_measure*,
  rem_measureGrp*,
  rem_geo*,
  rem_dim*,
  rem_height*,
  rem_depth*,
  rem_width*,
  rem_d*,
  rem_lbd*,
  rem_wä*,
  rem_sh*
rem_model.measureLike_sequenceRepeatable =
  rem_num+,
  rem_measure+,
  rem_measureGrp+,
  rem_geo+,
  rem_dim+,
  rem_height+,
  rem_depth+,
  rem_width+,
  rem_d+,
  rem_lbd+,
  rem_wä+,
  rem_sh+
rem_model.egLike = notAllowed
rem_model.egLike_alternation = notAllowed
rem_model.egLike_sequence = empty
rem_model.egLike_sequenceOptional = empty
rem_model.egLike_sequenceOptionalRepeatable = empty
rem_model.egLike_sequenceRepeatable = notAllowed
rem_model.graphicLike =
  rem_media | rem_graphic | rem_binaryObject | rem_formula
rem_model.offsetLike = rem_offset | rem_geogFeat
rem_model.offsetLike_alternation = rem_offset | rem_geogFeat
rem_model.offsetLike_sequence = rem_offset, rem_geogFeat
rem_model.offsetLike_sequenceOptional = rem_offset?, rem_geogFeat?
rem_model.offsetLike_sequenceOptionalRepeatable =
  rem_offset*, rem_geogFeat*
rem_model.offsetLike_sequenceRepeatable = rem_offset+, rem_geogFeat+
rem_model.pPart.msdesc =
  rem_catchwords
  | rem_dimensions
  | rem_heraldry
  | rem_locus
  | rem_locusGrp
  | rem_material
  | rem_objectType
  | rem_origDate
  | rem_origPlace
  | rem_secFol
  | rem_signatures
  | rem_stamp
  | rem_watermark
rem_model.pPart.editorial =
  rem_choice
  | rem_abbr
  | rem_expan
  | rem_ex
  | rem_am
  | rem_subst
  | rem_b
  | rem_price
rem_model.pPart.editorial_alternation =
  rem_choice
  | rem_abbr
  | rem_expan
  | rem_ex
  | rem_am
  | rem_subst
  | rem_b
  | rem_price
rem_model.pPart.editorial_sequence =
  rem_choice,
  rem_abbr,
  rem_expan,
  rem_ex,
  rem_am,
  rem_subst,
  rem_b,
  rem_price
rem_model.pPart.editorial_sequenceOptional =
  rem_choice?,
  rem_abbr?,
  rem_expan?,
  rem_ex?,
  rem_am?,
  rem_subst?,
  rem_b?,
  rem_price?
rem_model.pPart.editorial_sequenceOptionalRepeatable =
  rem_choice*,
  rem_abbr*,
  rem_expan*,
  rem_ex*,
  rem_am*,
  rem_subst*,
  rem_b*,
  rem_price*
rem_model.pPart.editorial_sequenceRepeatable =
  rem_choice+,
  rem_abbr+,
  rem_expan+,
  rem_ex+,
  rem_am+,
  rem_subst+,
  rem_b+,
  rem_price+
rem_model.pPart.transcriptional =
  rem_sic
  | rem_corr
  | rem_reg
  | rem_orig
  | rem_add
  | rem_del
  | rem_unclear
  | rem_damage
  | rem_handShift
  | rem_restore
  | rem_supplied
  | rem_surplus
  | rem_mod
  | rem_redo
  | rem_retrace
  | rem_undo
  | rem_app
  | rem_b
  | rem_klammer
  | rem_price
rem_model.pPart.transcriptional_alternation =
  rem_sic
  | rem_corr
  | rem_reg
  | rem_orig
  | rem_add
  | rem_del
  | rem_unclear
  | rem_damage
  | rem_handShift
  | rem_restore
  | rem_supplied
  | rem_surplus
  | rem_mod
  | rem_redo
  | rem_retrace
  | rem_undo
  | rem_app
  | rem_b
  | rem_klammer
  | rem_price
rem_model.pPart.transcriptional_sequence =
  rem_sic,
  rem_corr,
  rem_reg,
  rem_orig,
  rem_add,
  rem_del,
  rem_unclear,
  rem_damage,
  rem_handShift,
  rem_restore,
  rem_supplied,
  rem_surplus,
  rem_mod,
  rem_redo,
  rem_retrace,
  rem_undo,
  rem_app,
  rem_b,
  rem_klammer,
  rem_price
rem_model.pPart.transcriptional_sequenceOptional =
  rem_sic?,
  rem_corr?,
  rem_reg?,
  rem_orig?,
  rem_add?,
  rem_del?,
  rem_unclear?,
  rem_damage?,
  rem_handShift?,
  rem_restore?,
  rem_supplied?,
  rem_surplus?,
  rem_mod?,
  rem_redo?,
  rem_retrace?,
  rem_undo?,
  rem_app?,
  rem_b?,
  rem_klammer?,
  rem_price?
rem_model.pPart.transcriptional_sequenceOptionalRepeatable =
  rem_sic*,
  rem_corr*,
  rem_reg*,
  rem_orig*,
  rem_add*,
  rem_del*,
  rem_unclear*,
  rem_damage*,
  rem_handShift*,
  rem_restore*,
  rem_supplied*,
  rem_surplus*,
  rem_mod*,
  rem_redo*,
  rem_retrace*,
  rem_undo*,
  rem_app*,
  rem_b*,
  rem_klammer*,
  rem_price*
rem_model.pPart.transcriptional_sequenceRepeatable =
  rem_sic+,
  rem_corr+,
  rem_reg+,
  rem_orig+,
  rem_add+,
  rem_del+,
  rem_unclear+,
  rem_damage+,
  rem_handShift+,
  rem_restore+,
  rem_supplied+,
  rem_surplus+,
  rem_mod+,
  rem_redo+,
  rem_retrace+,
  rem_undo+,
  rem_app+,
  rem_b+,
  rem_klammer+,
  rem_price+
rem_model.pPart.edit =
  rem_model.pPart.editorial
  | rem_model.pPart.transcriptional
  | rem_b
  | rem_price
rem_model.linePart =
  rem_model.segLike
  | rem_model.hiLike
  | rem_model.pPart.transcriptional
  | rem_choice
  | rem_zone
  | rem_line
rem_model.ptrLike = rem_ptr | rem_ref
rem_model.lPart = notAllowed
rem_model.global.meta =
  rem_index
  | rem_span
  | rem_spanGrp
  | rem_interp
  | rem_interpGrp
  | rem_precision
  | rem_certainty
  | rem_respons
  | rem_link
  | rem_linkGrp
  | rem_timeline
  | rem_join
  | rem_joinGrp
  | rem_alt
  | rem_altGrp
  | rem_substJoin
  | rem_listTranspose
rem_model.milestoneLike =
  rem_milestone
  | rem_gb
  | rem_pb
  | rem_lb
  | rem_cb
  | rem_anchor
  | rem_fw
rem_model.gLike = rem_g
rem_model.biblLike =
  rem_bibl | rem_biblStruct | rem_listBibl | rem_biblFull | rem_msDesc
rem_model.biblLike_alternation =
  rem_bibl | rem_biblStruct | rem_listBibl | rem_biblFull | rem_msDesc
rem_model.biblLike_sequence =
  rem_bibl, rem_biblStruct, rem_listBibl, rem_biblFull, rem_msDesc
rem_model.biblLike_sequenceOptional =
  rem_bibl?, rem_biblStruct?, rem_listBibl?, rem_biblFull?, rem_msDesc?
rem_model.biblLike_sequenceOptionalRepeatable =
  rem_bibl*, rem_biblStruct*, rem_listBibl*, rem_biblFull*, rem_msDesc*
rem_model.biblLike_sequenceRepeatable =
  rem_bibl+, rem_biblStruct+, rem_listBibl+, rem_biblFull+, rem_msDesc+
rem_model.headLike = rem_head
rem_model.headLike_alternation = rem_head
rem_model.headLike_sequence = rem_head
rem_model.headLike_sequenceOptional = rem_head?
rem_model.headLike_sequenceOptionalRepeatable = rem_head*
rem_model.headLike_sequenceRepeatable = rem_head+
rem_model.labelLike = rem_desc | rem_label
rem_model.labelLike_alternation = rem_desc | rem_label
rem_model.labelLike_sequence = rem_desc, rem_label
rem_model.labelLike_sequenceOptional = rem_desc?, rem_label?
rem_model.labelLike_sequenceOptionalRepeatable = rem_desc*, rem_label*
rem_model.labelLike_sequenceRepeatable = rem_desc+, rem_label+
rem_model.listLike =
  rem_list
  | rem_table
  | rem_listOrg
  | rem_listEvent
  | rem_listPerson
  | rem_listPlace
  | rem_listNym
  | rem_listApp
  | rem_listWit
rem_model.listLike_alternation =
  rem_list
  | rem_table
  | rem_listOrg
  | rem_listEvent
  | rem_listPerson
  | rem_listPlace
  | rem_listNym
  | rem_listApp
  | rem_listWit
rem_model.listLike_sequence =
  rem_list,
  rem_table,
  rem_listOrg,
  rem_listEvent,
  rem_listPerson,
  rem_listPlace,
  rem_listNym,
  rem_listApp,
  rem_listWit
rem_model.listLike_sequenceOptional =
  rem_list?,
  rem_table?,
  rem_listOrg?,
  rem_listEvent?,
  rem_listPerson?,
  rem_listPlace?,
  rem_listNym?,
  rem_listApp?,
  rem_listWit?
rem_model.listLike_sequenceOptionalRepeatable =
  rem_list*,
  rem_table*,
  rem_listOrg*,
  rem_listEvent*,
  rem_listPerson*,
  rem_listPlace*,
  rem_listNym*,
  rem_listApp*,
  rem_listWit*
rem_model.listLike_sequenceRepeatable =
  rem_list+,
  rem_table+,
  rem_listOrg+,
  rem_listEvent+,
  rem_listPerson+,
  rem_listPlace+,
  rem_listNym+,
  rem_listApp+,
  rem_listWit+
rem_model.noteLike = rem_note | rem_witDetail
rem_model.lLike = rem_l
rem_model.lLike_alternation = rem_l
rem_model.lLike_sequence = rem_l
rem_model.lLike_sequenceOptional = rem_l?
rem_model.lLike_sequenceOptionalRepeatable = rem_l*
rem_model.lLike_sequenceRepeatable = rem_l+
rem_model.pLike = rem_p | rem_ab | rem_e | rem_sum | rem_klammer
rem_model.pLike_alternation =
  rem_p | rem_ab | rem_e | rem_sum | rem_klammer
rem_model.pLike_sequence = rem_p, rem_ab, rem_e, rem_sum, rem_klammer
rem_model.pLike_sequenceOptional =
  rem_p?, rem_ab?, rem_e?, rem_sum?, rem_klammer?
rem_model.pLike_sequenceOptionalRepeatable =
  rem_p*, rem_ab*, rem_e*, rem_sum*, rem_klammer*
rem_model.pLike_sequenceRepeatable =
  rem_p+, rem_ab+, rem_e+, rem_sum+, rem_klammer+
rem_model.stageLike = rem_stage
rem_model.stageLike_alternation = rem_stage
rem_model.stageLike_sequence = rem_stage
rem_model.stageLike_sequenceOptional = rem_stage?
rem_model.stageLike_sequenceOptionalRepeatable = rem_stage*
rem_model.stageLike_sequenceRepeatable = rem_stage+
rem_model.entryPart = notAllowed
rem_model.global.edit =
  rem_gap | rem_addSpan | rem_damageSpan | rem_delSpan | rem_space
rem_model.divPart =
  rem_model.lLike | rem_model.pLike | rem_lg | rem_sp | rem_e | rem_sum
rem_model.persStateLike =
  rem_persName
  | rem_affiliation
  | rem_age
  | rem_education
  | rem_faith
  | rem_floruit
  | rem_langKnowledge
  | rem_nationality
  | rem_occupation
  | rem_residence
  | rem_sex
  | rem_socecStatus
  | rem_state
  | rem_trait
rem_model.persEventLike =
  rem_birth | rem_death | rem_event | rem_listEvent
rem_model.personLike = rem_org | rem_person | rem_personGrp
rem_model.personPart =
  rem_model.biblLike
  | rem_model.persStateLike
  | rem_model.persEventLike
  | rem_idno
rem_model.placeNamePart =
  rem_placeName
  | rem_bloc
  | rem_country
  | rem_region
  | rem_district
  | rem_settlement
  | rem_geogName
rem_model.placeNamePart_alternation =
  rem_placeName
  | rem_bloc
  | rem_country
  | rem_region
  | rem_district
  | rem_settlement
  | rem_geogName
rem_model.placeNamePart_sequence =
  rem_placeName,
  rem_bloc,
  rem_country,
  rem_region,
  rem_district,
  rem_settlement,
  rem_geogName
rem_model.placeNamePart_sequenceOptional =
  rem_placeName?,
  rem_bloc?,
  rem_country?,
  rem_region?,
  rem_district?,
  rem_settlement?,
  rem_geogName?
rem_model.placeNamePart_sequenceOptionalRepeatable =
  rem_placeName*,
  rem_bloc*,
  rem_country*,
  rem_region*,
  rem_district*,
  rem_settlement*,
  rem_geogName*
rem_model.placeNamePart_sequenceRepeatable =
  rem_placeName+,
  rem_bloc+,
  rem_country+,
  rem_region+,
  rem_district+,
  rem_settlement+,
  rem_geogName+
rem_model.placeStateLike =
  rem_model.placeNamePart
  | rem_climate
  | rem_location
  | rem_population
  | rem_state
  | rem_terrain
  | rem_trait
rem_model.placeStateLike_alternation =
  rem_model.placeNamePart_alternation
  | rem_climate
  | rem_location
  | rem_population
  | rem_state
  | rem_terrain
  | rem_trait
rem_model.placeStateLike_sequence =
  rem_model.placeNamePart_sequence,
  rem_climate,
  rem_location,
  rem_population,
  rem_state,
  rem_terrain,
  rem_trait
rem_model.placeStateLike_sequenceOptional =
  rem_model.placeNamePart_sequenceOptional?,
  rem_climate?,
  rem_location?,
  rem_population?,
  rem_state?,
  rem_terrain?,
  rem_trait?
rem_model.placeStateLike_sequenceOptionalRepeatable =
  rem_model.placeNamePart_sequenceOptionalRepeatable*,
  rem_climate*,
  rem_location*,
  rem_population*,
  rem_state*,
  rem_terrain*,
  rem_trait*
rem_model.placeStateLike_sequenceRepeatable =
  rem_model.placeNamePart_sequenceRepeatable+,
  rem_climate+,
  rem_location+,
  rem_population+,
  rem_state+,
  rem_terrain+,
  rem_trait+
rem_model.placeEventLike = rem_event
rem_model.orgPart = rem_listOrg | rem_listPerson | rem_listPlace
rem_model.publicationStmtPart.agency =
  rem_publisher | rem_distributor | rem_authority
rem_model.publicationStmtPart.detail =
  rem_address | rem_date | rem_pubPlace | rem_idno | rem_availability
rem_model.availabilityPart = rem_licence
rem_model.certLike = rem_precision | rem_certainty | rem_respons
rem_model.descLike = rem_desc
rem_model.glossLike = rem_gloss
rem_model.quoteLike = rem_quote | rem_cit
rem_model.quoteLike_alternation = rem_quote | rem_cit
rem_model.quoteLike_sequence = rem_quote, rem_cit
rem_model.quoteLike_sequenceOptional = rem_quote?, rem_cit?
rem_model.quoteLike_sequenceOptionalRepeatable = rem_quote*, rem_cit*
rem_model.quoteLike_sequenceRepeatable = rem_quote+, rem_cit+
rem_model.qLike =
  rem_model.quoteLike | rem_said | rem_q | rem_floatingText
rem_model.qLike_alternation =
  rem_model.quoteLike_alternation | rem_said | rem_q | rem_floatingText
rem_model.qLike_sequence =
  rem_model.quoteLike_sequence, rem_said, rem_q, rem_floatingText
rem_model.qLike_sequenceOptional =
  rem_model.quoteLike_sequenceOptional?,
  rem_said?,
  rem_q?,
  rem_floatingText?
rem_model.qLike_sequenceOptionalRepeatable =
  rem_model.quoteLike_sequenceOptionalRepeatable*,
  rem_said*,
  rem_q*,
  rem_floatingText*
rem_model.qLike_sequenceRepeatable =
  rem_model.quoteLike_sequenceRepeatable+,
  rem_said+,
  rem_q+,
  rem_floatingText+
rem_model.respLike =
  rem_author
  | rem_editor
  | rem_respStmt
  | rem_meeting
  | rem_sponsor
  | rem_funder
  | rem_principal
rem_model.divWrapper =
  rem_meeting
  | rem_byline
  | rem_dateline
  | rem_argument
  | rem_epigraph
  | rem_salute
  | rem_docAuthor
  | rem_docDate
rem_model.divTopPart = rem_model.headLike | rem_opener | rem_signed
rem_model.divTop = rem_model.divWrapper | rem_model.divTopPart
rem_model.pLike.front =
  rem_head
  | rem_byline
  | rem_argument
  | rem_epigraph
  | rem_docTitle
  | rem_titlePart
  | rem_docAuthor
  | rem_docEdition
  | rem_docImprint
  | rem_docDate
rem_model.divBottomPart =
  rem_trailer | rem_closer | rem_signed | rem_postscript | rem_sum
rem_model.divBottom =
  rem_model.divWrapper | rem_model.divBottomPart | rem_sum
rem_model.titlepagePart =
  rem_graphic
  | rem_binaryObject
  | rem_byline
  | rem_argument
  | rem_epigraph
  | rem_docTitle
  | rem_titlePart
  | rem_docAuthor
  | rem_imprimatur
  | rem_docEdition
  | rem_docImprint
  | rem_docDate
rem_model.msQuoteLike =
  rem_title
  | rem_colophon
  | rem_explicit
  | rem_finalRubric
  | rem_incipit
  | rem_rubric
rem_model.msItemPart =
  rem_model.biblLike
  | rem_model.quoteLike
  | rem_model.respLike
  | rem_model.msQuoteLike
  | rem_textLang
  | rem_idno
  | rem_filiation
  | rem_msItem
  | rem_msItemStruct
  | rem_decoNote
rem_model.choicePart =
  rem_sic
  | rem_corr
  | rem_reg
  | rem_orig
  | rem_unclear
  | rem_abbr
  | rem_expan
  | rem_seg
  | rem_ex
  | rem_am
  | rem_b
  | rem_price
rem_model.imprintPart =
  rem_publisher | rem_biblScope | rem_pubPlace | rem_distributor
rem_model.catDescPart = notAllowed
rem_model.physDescPart_sequenceOptional =
  rem_objectDesc?,
  rem_handDesc?,
  rem_typeDesc?,
  rem_scriptDesc?,
  rem_musicNotation?,
  rem_decoDesc?,
  rem_additions?,
  rem_bindingDesc?,
  rem_sealDesc?,
  rem_accMat?
rem_model.addressLike = rem_email | rem_address | rem_affiliation
rem_model.addressLike_alternation =
  rem_email | rem_address | rem_affiliation
rem_model.addressLike_sequence = rem_email, rem_address, rem_affiliation
rem_model.addressLike_sequenceOptional =
  rem_email?, rem_address?, rem_affiliation?
rem_model.addressLike_sequenceOptionalRepeatable =
  rem_email*, rem_address*, rem_affiliation*
rem_model.addressLike_sequenceRepeatable =
  rem_email+, rem_address+, rem_affiliation+
rem_model.nameLike =
  rem_model.nameLike.agent
  | rem_model.offsetLike
  | rem_model.placeStateLike
  | rem_rs
  | rem_idno
  | rem_model.persNamePart
rem_model.nameLike_alternation =
  rem_model.nameLike.agent_alternation
  | rem_model.offsetLike_alternation
  | rem_model.placeStateLike_alternation
  | rem_rs
  | rem_idno
  | rem_model.persNamePart_alternation
rem_model.nameLike_sequence =
  rem_model.nameLike.agent_sequence,
  rem_model.offsetLike_sequence,
  rem_model.placeStateLike_sequence,
  rem_rs,
  rem_idno,
  rem_model.persNamePart_sequence
rem_model.nameLike_sequenceOptional =
  rem_model.nameLike.agent_sequenceOptional?,
  rem_model.offsetLike_sequenceOptional?,
  rem_model.placeStateLike_sequenceOptional?,
  rem_rs?,
  rem_idno?,
  rem_model.persNamePart_sequenceOptional?
rem_model.nameLike_sequenceOptionalRepeatable =
  rem_model.nameLike.agent_sequenceOptionalRepeatable*,
  rem_model.offsetLike_sequenceOptionalRepeatable*,
  rem_model.placeStateLike_sequenceOptionalRepeatable*,
  rem_rs*,
  rem_idno*,
  rem_model.persNamePart_sequenceOptionalRepeatable*
rem_model.nameLike_sequenceRepeatable =
  rem_model.nameLike.agent_sequenceRepeatable+,
  rem_model.offsetLike_sequenceRepeatable+,
  rem_model.placeStateLike_sequenceRepeatable+,
  rem_rs+,
  rem_idno+,
  rem_model.persNamePart_sequenceRepeatable+
rem_model.global =
  rem_model.global.meta
  | rem_model.milestoneLike
  | rem_model.noteLike
  | rem_model.global.edit
  | rem_notatedMusic
  | rem_figure
  | rem_metamark
  | rem_klammer
rem_model.biblPart =
  rem_model.respLike
  | rem_model.imprintPart
  | rem_series
  | rem_citedRange
  | rem_bibl
  | rem_relatedItem
  | rem_textLang
  | rem_edition
  | rem_extent
  | rem_availability
  | rem_listRelation
  | rem_msIdentifier
rem_model.frontPart = rem_divGen | rem_titlePage
rem_model.addrPart =
  rem_model.nameLike
  | rem_addrLine
  | rem_street
  | rem_postCode
  | rem_postBox
rem_model.pPart.data =
  rem_model.dateLike
  | rem_model.measureLike
  | rem_model.addressLike
  | rem_model.nameLike
  | rem_b
  | rem_price
rem_model.inter =
  rem_model.egLike
  | rem_model.biblLike
  | rem_model.labelLike
  | rem_model.listLike
  | rem_model.stageLike
  | rem_model.qLike
rem_model.common = rem_model.divPart | rem_model.inter
rem_model.phrase =
  rem_model.segLike
  | rem_model.highlighted
  | rem_model.graphicLike
  | rem_model.pPart.msdesc
  | rem_model.pPart.edit
  | rem_model.ptrLike
  | rem_model.lPart
  | rem_model.pPart.data
rem_model.limitedPhrase =
  rem_model.hiLike
  | rem_model.emphLike
  | rem_model.pPart.msdesc
  | rem_model.pPart.editorial
  | rem_model.ptrLike
  | rem_model.pPart.data
rem_model.divLike = rem_div | rem_sum
rem_model.divGenLike = rem_divGen
rem_model.div1Like = rem_div1
rem_model.div2Like = rem_div2
rem_model.div3Like = rem_div3
rem_model.div4Like = rem_div4
rem_model.div5Like = rem_div5
rem_model.div6Like = rem_div6
rem_model.div7Like = rem_div7
rem_model.applicationLike = rem_application
rem_model.teiHeaderPart = rem_encodingDesc | rem_profileDesc
rem_model.sourceDescPart = notAllowed
rem_model.encodingDescPart =
  rem_projectDesc
  | rem_samplingDecl
  | rem_editorialDecl
  | rem_tagsDecl
  | rem_styleDefDecl
  | rem_refsDecl
  | rem_listPrefixDef
  | rem_classDecl
  | rem_geoDecl
  | rem_appInfo
  | rem_charDecl
  | rem_variantEncoding
rem_model.editorialDeclPart =
  rem_correction
  | rem_normalization
  | rem_quotation
  | rem_hyphenation
  | rem_segmentation
  | rem_stdVals
  | rem_interpretation
  | rem_punctuation
rem_model.profileDescPart =
  rem_abstract
  | rem_creation
  | rem_langUsage
  | rem_textClass
  | rem_calendarDesc
  | rem_handNotes
  | rem_listTranspose
rem_att.source.attributes = rem_att.source.attribute.source
rem_att.source.attribute.source =
  
  ## provides a pointer to the bibliographical source from which a quotation or citation is drawn.
  attribute source {
    list { rem_data.pointer+ }
  }?
rem_model.resourceLike = rem_facsimile | rem_sourceDoc
rem_att.personal.attributes =
  rem_att.naming.attributes,
  rem_att.personal.attribute.full,
  rem_att.personal.attribute.sort
rem_att.personal.attribute.full =
  
  ## indicates whether the name component is given in full, as an abbreviation or simply as an initial.
  [ a:defaultValue = "yes" ]
  attribute full {
    
    ## the name component is spelled out in full.
    "yes"
    | 
      ## (abbreviated) the name component is given in an abbreviated form.
      "abb"
    | 
      ## (initial letter) the name component is indicated only by one initial.
      "init"
  }?
rem_att.personal.attribute.sort =
  
  ## specifies the sort order of the name component in relation to others within the name.
  attribute sort { rem_data.count }?
rem_model.placeLike = rem_place
rem_att.milestoneUnit.attributes = rem_att.milestoneUnit.attribute.unit
rem_att.milestoneUnit.attribute.unit =
  
  ## provides a conventional name for the kind of section changing at this milestone.
  ## Empfohlene Werte sind: 1] page; 2] column; 3] line; 4] book; 5] poem; 6] canto; 7] speaker; 8] stanza; 9] act; 10] scene; 11] section; 12] absent; 13] unnumbered
  attribute unit {
    
    ## physical page breaks (synonymous with the pb element).
    "page"
    | 
      ## column breaks.
      "column"
    | 
      ## line breaks (synonymous with the lb element).
      "line"
    | 
      ## any units termed book, liber, etc.
      "book"
    | 
      ## individual poems in a collection.
      "poem"
    | 
      ## cantos or other major sections of a poem.
      "canto"
    | 
      ## changes of speaker or narrator.
      "speaker"
    | 
      ## stanzas within a poem, book, or canto.
      "stanza"
    | 
      ## acts within a play.
      "act"
    | 
      ## scenes within a play or act.
      "scene"
    | 
      ## sections of any kind.
      "section"
    | 
      ## passages not present in the reference edition.
      "absent"
    | 
      ## passages present in the text, but not to be included as part of the reference.
      "unnumbered"
    | xsd:Name
  }
rem_p =
  
  ## (paragraph) marks paragraphs in prose. [3.1.  7.2.5. ]
  element p {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    rem_att.fragmentable.attributes,
    
    ## describes the place of the paragraph on the page if not part of the continuous flow of text
    ## Beispielwerte sind etwa: 1] below bottom margin top opposite overleaf above end inline inspace
    attribute place { rem_data.enumerated }?,
    empty
  }
rem_foreign =
  
  ## identifies a word or phrase as belonging to some language other than that of the surrounding text. [3.3.2.1. ]
  element foreign {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_emph =
  
  ## (emphasized) marks words or phrases which are stressed or emphasized for linguistic or rhetorical effect. [3.3.2.2.  3.3.2. ]
  element emph {
    rem_macro.paraContent, rem_att.global.attributes, empty
  }
rem_hi =
  
  ## (highlighted) marks a word or phrase as graphically distinct from the surrounding text, for reasons concerning which no claim is made. [3.3.2.2.  3.3.2. ]
  element hi { rem_macro.paraContent, rem_att.global.attributes, empty }
rem_distinct =
  
  ## identifies any word or phrase which is regarded as linguistically distinct, for example as archaic, technical, dialectal, non-preferred, etc., or as forming part of a sublanguage. [3.3.2.3. ]
  element distinct {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    
    ## specifies the sublanguage or register to which the word or phrase is being assigned
    attribute type { rem_data.enumerated }?,
    
    ## specifies how the phrase is distinct diachronically
    attribute time { rem_data.text }?,
    
    ## specifies how the phrase is distinct diatopically
    attribute space { rem_data.text }?,
    
    ## specifies how the phrase is distinct diastatically
    attribute social { rem_data.text }?,
    empty
  }
rem_said =
  
  ## (speech or thought) indicates passages thought or spoken aloud, whether explicitly indicated in the source or not, whether directly or indirectly reported, whether by real people or fictional characters. [3.3.3. ]
  element said {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.ascribed.attributes,
    
    ## may be used to indicate whether the quoted matter is regarded as having been vocalized or signed.
    [ a:defaultValue = "unknown" ]
    attribute aloud { rem_data.xTruthValue }?,
    
    ## may be used to indicate whether the quoted matter is regarded as direct or indirect speech.
    [ a:defaultValue = "true" ]
    attribute direct { rem_data.xTruthValue }?,
    empty
  }
rem_quote =
  
  ## (quotation) contains a phrase or passage attributed by the narrator or author to some agency external to the text. [3.3.3.  4.3.1. ]
  element quote {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.msExcerpt.attributes,
    rem_att.source.attributes,
    empty
  }
rem_q =
  
  ## (quoted) contains material which is distinguished from the surrounding text using quotation marks or a similar method, for any one of a variety of reasons including, but not limited to: direct speech or thought, technical terms or jargon, authorial distance, quotations from elsewhere, and passages that are mentioned but not used. [3.3.3. ]
  element q {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.ascribed.attributes,
    rem_att.source.attributes,
    
    ## may be used to indicate whether the offset passage is spoken or thought, or to characterize it more finely.
    ## Empfohlene Werte sind: 1] spoken; 2] thought; 3] written; 4] soCalled; 5] foreign; 6] distinct; 7] term; 8] emph; 9] mentioned
    attribute type {
      
      ## representation of speech
      "spoken"
      | 
        ## representation of thought, e.g. internal monologue
        "thought"
      | 
        ## quotation from a written source
        "written"
      | 
        ## authorial distance
        "soCalled"
      | 
        ##
        "foreign"
      | 
        ## linguistically distinct
        "distinct"
      | 
        ## technical term
        "term"
      | 
        ## rhetorically emphasized
        "emph"
      | 
        ## refering to itself, not its normal referent
        "mentioned"
      | xsd:Name
    }?,
    empty
  }
rem_cit =
  
  ## (cited quotation) contains a quotation from some other document, together with a bibliographic reference to its source. In a dictionary it may contain an example text with at least one occurrence of the word form, used in the sense being described, or a translation of the headword, or an example. [3.3.3.  4.3.1.  9.3.5.1. ]
  element cit {
    (rem_model.qLike
     | rem_model.egLike
     | rem_model.biblLike
     | rem_model.ptrLike
     | rem_model.global
     | rem_model.entryPart)+,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_mentioned =
  
  ## marks words or phrases mentioned, not used. [3.3.3. ]
  element mentioned {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_soCalled =
  
  ## contains a word or phrase for which the author or narrator indicates a disclaiming of responsibility, for example by the use of scare quotes or italics. [3.3.3. ]
  element soCalled {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_desc =
  
  ## (description) contains a brief description of the object documented by its parent element, including its intended usage, purpose, or application where this is appropriate. [22.4.1. ]
  element desc {
    rem_macro.limitedContent,
    rem_att.global.attributes,
    rem_att.translatable.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_gloss =
  
  ## identifies a phrase or word used to provide a gloss or definition for some other word or phrase. [3.3.4.  22.4.1. ]
  element gloss {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    rem_att.translatable.attributes,
    rem_att.typed.attributes,
    rem_att.pointing.attributes,
    rem_att.cReferencing.attributes,
    empty
  }
rem_term =
  
  ## contains a single-word, multi-word, or symbolic designation which is regarded as a technical term. [3.3.4. ]
  element term {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    rem_att.pointing.attributes,
    rem_att.typed.attributes,
    rem_att.canonical.attributes,
    rem_att.sortable.attributes,
    rem_att.cReferencing.attributes,
    empty
  }
rem_sic =
  
  ## (Latin for thus or so
  ##    ) contains text reproduced although apparently incorrect or inaccurate. [3.4.1. ]
  element sic {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.responsibility.attributes,
    empty
  }
rem_corr =
  
  ## (correction) contains the correct form of a passage apparently erroneous in the copy text. [3.4.1. ]
  element corr {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_choice =
  
  ## groups a number of alternative encodings for the same point in a text. [3.4. ]
  element choice {
    (rem_model.choicePart | rem_choice)*,
    rem_att.global.attributes,
    empty
  }
rem_reg =
  
  ## (regularization) contains a reading which has been regularized or normalized in some sense. [3.4.2.  12. ]
  element reg {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_orig =
  
  ## (original form) contains a reading which is marked as following the original, rather than being normalized or corrected. [3.4.2.  12. ]
  element orig {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.responsibility.attributes,
    empty
  }
rem_gap =
  
  ## indicates a point where material has been omitted in a transcription, whether for editorial reasons described in the TEI header, as part of sampling practice, or because the material is illegible, invisible, or inaudible. [3.4.3. ]
  element gap {
    (rem_model.descLike | rem_model.certLike)*,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    
    ## gives the reason for omission. Sample values include sampling, inaudible, irrelevant, cancelled.
    attribute reason {
      list { rem_data.word+ }
    }?,
    
    ## in the case of text omitted from the transcription because of deliberate deletion by an identifiable hand, indicates the hand which made the deletion.
    attribute hand { rem_data.pointer }?,
    
    ## in the case of text omitted because of damage, categorizes the cause of the damage, if it can be identified.
    ## Beispielwerte sind etwa: 1] rubbing; 2] mildew; 3] smoke
    attribute agent { rem_data.enumerated }?,
    empty
  }
rem_add =
  
  ## (addition) contains letters, words, or phrases inserted in the source text by an author, scribe, or a previous annotator or corrector. [3.4.3. ]
  element add {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.transcriptional.attributes,
    rem_att.placement.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_del =
  
  ## (deletion) contains a letter, word, or passage deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, or a previous annotator or corrector. [3.4.3. ]
  element del {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.transcriptional.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_unclear =
  
  ## contains a word, phrase, or passage which cannot be transcribed with certainty because it is illegible or inaudible in the source. [11.3.3.1.  3.4.3. ]
  element unclear {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    
    ## indicates why the material is hard to transcribe.
    attribute reason {
      list { rem_data.word+ }
    }?,
    
    ## Where the difficulty in transcription arises from action (partial deletion, etc.) assignable to an identifiable hand, signifies the hand responsible for the action.
    attribute hand { rem_data.pointer }?,
    
    ## Where the difficulty in transcription arises from damage, categorizes the cause of the damage, if it can be identified.
    ## Beispielwerte sind etwa: 1] rubbing; 2] mildew; 3] smoke
    attribute agent { rem_data.enumerated }?,
    empty
  }
rem_name =
  
  ## (name, proper noun) contains a proper noun or noun phrase. [3.5.1. ]
  element name {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.personal.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_rs =
  
  ## (referencing string) contains a general purpose name or referring string. [13.2.1.  3.5.1. ]
  element rs {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    rem_att.responsibility.attributes,
    empty
  }
rem_email =
  
  ## (electronic mail address) contains an email address identifying a location to which email messages can be delivered. [3.5.2. ]
  element email {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_address =
  
  ## contains a postal address, for example of a publisher, an organization, or an individual. [3.5.2.  2.2.4.  3.11.2.4. ]
  element address {
    (rem_model.global*, (rem_model.addrPart, rem_model.global*)+),
    rem_att.global.attributes,
    empty
  }
rem_addrLine =
  
  ## (address line) contains one line of a postal address. [3.5.2.  2.2.4.  3.11.2.4. ]
  element addrLine {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_street =
  
  ## contains a full street address including any name or number identifying a building as well as the name of the street or route on which it is located. [3.5.2. ]
  element street {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_postCode =
  
  ## (postal code) contains a numerical or alphanumeric code used as part of a postal address to simplify sorting or delivery of mail. [3.5.2. ]
  element postCode { text, rem_att.global.attributes, empty }
rem_postBox =
  
  ## (postal box or post office box) contains a number or other identifier for some postal delivery point other than a street address. [3.5.2. ]
  element postBox { text, rem_att.global.attributes, empty }
rem_num =
  
  ## (number) contains a number, written in any form. [3.5.3. ]
  element num {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.ranging.attributes,
    
    ## indicates the type of numeric value.
    ## Empfohlene Werte sind: 1] cardinal; 2] ordinal; 3] fraction; 4] percentage
    attribute type {
      
      ## absolute number, e.g. 21, 21.5
      "cardinal"
      | 
        ## ordinal number, e.g. 21st
        "ordinal"
      | 
        ## fraction, e.g. one half or three-quarters
        "fraction"
      | 
        ## a percentage
        "percentage"
      | xsd:Name
    }?,
    
    ## supplies the value of the number in standard form.
    attribute value { rem_data.numeric }?,
    empty
  }
rem_measure =
  
  ## contains a word or phrase referring to some quantity of an object or commodity, usually comprising a number, a unit, and a commodity name. [3.5.3. ]
  element measure {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.measurement.attributes,
    
    ## specifies the type of measurement in any convenient typology.
    attribute type { rem_data.enumerated }?,
    empty
  }
rem_measureGrp =
  
  ## (measure group) contains a group of dimensional specifications which relate to the same object, for example the height and width of a manuscript page. [10.3.4. ]
  element measureGrp {
    (text | rem_model.gLike | rem_model.measureLike)*,
    rem_att.global.attributes,
    rem_att.measurement.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_date =
  
  ## contains a date in any format. [3.5.4.  2.2.4.  2.5.  3.11.2.4.  15.2.3.  13.3.6. ]
  element date {
    (text | rem_model.gLike | rem_model.phrase | rem_model.global)*,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_time =
  
  ## contains a phrase defining a time of day in any format. [3.5.4. ]
  element time {
    (text | rem_model.gLike | rem_model.phrase | rem_model.global)*,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_abbr =
  
  ## (abbreviation) contains an abbreviation of any sort. [3.5.5. ]
  element abbr {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.responsibility.attributes,
    rem_att.typed.attribute.subtype,
    
    ## allows the encoder to classify the abbreviation according to some convenient typology.
    attribute type { rem_data.enumerated }?,
    empty
  }
rem_expan =
  
  ## (expansion) contains the expansion of an abbreviation. [3.5.5. ]
  element expan {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    empty
  }
rem_ptr =
  
  ## (pointer) defines a pointer to another location. [3.6.  16.1. ]
  element ptr {
    empty
    >> sch:pattern [
         id = "rem-basel-ptr-ptrAtts-constraint-1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ptr"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "attributes @target and @cRef may be supplied on "
             sch:name [ ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.pointing.attributes,
    rem_att.internetMedia.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    rem_att.cReferencing.attributes,
    empty
  }
rem_ref =
  
  ## (reference) defines a reference to another location, possibly modified by additional text or comment. [3.6.  16.1. ]
  element ref {
    rem_macro.paraContent
    >> sch:pattern [
         id = "rem-basel-ref-refAtts-constraint-2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ref"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "	attributes @target' and @cRef' may be supplied on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.pointing.attributes,
    rem_att.internetMedia.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    rem_att.cReferencing.attributes,
    empty
  }
rem_list =
  
  ## contains any sequence of items organized as a list. [3.7. ]
  element list {
    ((rem_model.divTop | rem_model.global)*,
     ((rem_item, rem_model.global*)+
      | (rem_headLabel?,
         rem_headItem?,
         (rem_label, rem_model.global*, rem_item, rem_model.global*)+)),
     (rem_model.divBottom, rem_model.global*)*),
    rem_att.global.attributes,
    rem_att.sortable.attributes,
    rem_att.typed.attribute.subtype,
    
    ## describes the nature of the items in the list.
    ## Empfohlene Werte sind: 1] gloss; 2] index; 3] instructions; 4] litany; 5] syllogism
    attribute type {
      
      ## each list item glosses some term or concept, which is given by a label element preceding the list item.
      "gloss"
      | 
        ## each list item is an entry in an index such as the alphabetical topical index at the back of a print volume.
        "index"
      | 
        ## each list item is a step in a sequence of instructions, as in a recipe.
        "instructions"
      | 
        ## each list item is one of a sequence of petitions, supplications or invocations, typically in a religious ritual.
        "litany"
      | 
        ## each list item is part of an argument consisting of two or more propositions and a final conclusion derived from them.
        "syllogism"
      | xsd:Name
    }?,
    empty
  }
rem_item =
  
  ## contains one component of a list. [3.7.  2.5. ]
  element item {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.sortable.attributes,
    empty
  }
rem_label =
  
  ## contains any label or heading used to identify part of a text, typically but not exclusively in a list or glossary. [3.7. ]
  element label {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.placement.attributes,
    empty
  }
rem_head =
  
  ## (heading) contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. [4.2.1. ]
  element head {
    (text
     | rem_lg
     | rem_model.gLike
     | rem_model.phrase
     | rem_model.inter
     | rem_model.lLike
     | rem_model.global)*,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_headLabel =
  
  ## (heading for list labels) contains the heading for the label or term column in a glossary list or similar structured list. [3.7. ]
  element headLabel {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_headItem =
  
  ## (heading for list items) contains the heading for the item or gloss column in a glossary list or similar structured list. [3.7. ]
  element headItem {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_note =
  
  ## contains a note or annotation. [3.8.1.  2.2.6.  3.11.2.8.  9.3.5.4. ]
  element note {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.placement.attributes,
    rem_att.pointing.attributes,
    rem_att.responsibility.attributes,
    rem_att.typed.attributes,
    
    ## indicates whether the copy text shows the exact place of reference for the note.
    [ a:defaultValue = "true" ]
    attribute anchored { rem_data.truthValue }?,
    
    ## points to the end of the span to which the note is attached, if the note is not embedded in the text at that point.
    attribute targetEnd {
      list { rem_data.pointer+ }
    }?,
    empty
  }
rem_index =
  
  ## (index entry) marks a location to be indexed for whatever purpose. [3.8.2. ]
  element index {
    (rem_term, rem_index?)*,
    rem_att.global.attributes,
    rem_att.spanning.attributes,
    
    ## a single word which follows the rules defining a legal XML name (see ), supplying a name to specify which index (of several) the index entry belongs to.
    attribute indexName { rem_data.name }?,
    empty
  }
rem_media =
  
  ## indicates the location of any form of external media such as an audio or video clip etc. [3.9. ]
  element media {
    rem_model.descLike*,
    rem_att.typed.attributes,
    rem_att.global.attributes,
    rem_att.media.attribute.width,
    rem_att.media.attribute.height,
    rem_att.media.attribute.scale,
    rem_att.resourced.attributes,
    rem_att.declaring.attributes,
    rem_att.timed.attributes,
    
    ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
    attribute mimeType {
      list { rem_data.word+ }
    },
    empty
  }
rem_graphic =
  
  ## indicates the location of an inline graphic, illustration, or figure. [3.9. ]
  element graphic {
    rem_model.descLike*,
    rem_att.global.attributes,
    rem_att.media.attributes,
    rem_att.resourced.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_binaryObject =
  
  ## provides encoded binary data representing an inline graphic, audio, video or other object. [3.9. ]
  element binaryObject {
    text,
    rem_att.global.attributes,
    rem_att.media.attributes,
    rem_att.timed.attributes,
    rem_att.typed.attributes,
    
    ## The encoding used to encode the binary data. If not specified, this is assumed to be Base64.
    attribute encoding {
      list { rem_data.word+ }
    }?,
    empty
  }
rem_milestone =
  
  ## marks a boundary point separating any kind of section of a text, typically but not necessarily indicating a point at which some part of a standard reference system changes, where the change is not represented by a structural element. [3.10.3. ]
  element milestone {
    empty,
    rem_att.global.attributes,
    rem_att.milestoneUnit.attributes,
    rem_att.typed.attributes,
    rem_att.edition.attributes,
    rem_att.spanning.attributes,
    rem_att.breaking.attributes,
    empty
  }
rem_gb =
  
  ## (gathering begins) marks the point in a transcribed codex at which a new gathering or quire begins. [3.10.3. ]
  element gb {
    empty,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.spanning.attributes,
    rem_att.breaking.attributes,
    empty
  }
rem_pb =
  
  ## (page break) marks the start of a new page in a paginated document. [3.10.3. ]
  element pb {
    empty,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.edition.attributes,
    rem_att.spanning.attributes,
    rem_att.breaking.attributes,
    empty
  }
rem_lb =
  
  ## (line break) marks the start of a new (typographic) line in some edition or version of a text. [3.10.3.  7.2.5. ]
  element lb {
    empty,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.edition.attributes,
    rem_att.spanning.attributes,
    rem_att.breaking.attributes,
    empty
  }
rem_cb =
  
  ## (column break) marks the beginning of a new column of a text on a multi-column page. [3.10.3. ]
  element cb {
    empty,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.edition.attributes,
    rem_att.spanning.attributes,
    rem_att.breaking.attributes,
    empty
  }
rem_analytic =
  
  ## (analytic level) contains bibliographic elements describing an item (e.g. an article or poem) published within a monograph or journal and not as an independent publication. [3.11.2.1. ]
  element analytic {
    (rem_author
     | rem_editor
     | rem_respStmt
     | rem_title
     | rem_model.ptrLike
     | rem_date
     | rem_textLang
     | rem_idno
     | rem_availability)*,
    rem_att.global.attributes,
    empty
  }
rem_monogr =
  
  ## (monographic level) contains bibliographic elements describing an item (e.g. a book or journal) published as an independent item (i.e. as a separate physical object). [3.11.2.1. ]
  element monogr {
    ((((rem_author | rem_editor | rem_meeting | rem_respStmt),
       (rem_author | rem_editor | rem_meeting | rem_respStmt)*,
       rem_title+,
       (rem_model.ptrLike
        | rem_idno
        | rem_textLang
        | rem_editor
        | rem_respStmt)*)
      | ((rem_title | rem_model.ptrLike | rem_idno)+,
         (rem_textLang
          | rem_author
          | rem_editor
          | rem_meeting
          | rem_respStmt)*)
      | (rem_authority, rem_idno))?,
     rem_availability*,
     rem_model.noteLike*,
     (rem_edition,
      (rem_idno
       | rem_model.ptrLike
       | rem_editor
       | rem_sponsor
       | rem_funder
       | rem_respStmt)*)*,
     rem_imprint,
     (rem_imprint | rem_extent | rem_biblScope)*),
    rem_att.global.attributes,
    empty
  }
rem_series =
  
  ## (series information) contains information about the series in which a book or other bibliographic item has appeared. [3.11.2.1. ]
  element series {
    (text
     | rem_model.gLike
     | rem_title
     | rem_model.ptrLike
     | rem_editor
     | rem_respStmt
     | rem_biblScope
     | rem_idno
     | rem_textLang
     | rem_model.global
     | rem_availability)*,
    rem_att.global.attributes,
    empty
  }
rem_author =
  
  ## in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority. [3.11.2.2.  2.2.1. ]
  element author {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_editor =
  
  ## contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc. [3.11.2.2. ]
  element editor {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_respStmt =
  
  ## (statement of responsibility) supplies a statement of responsibility for the intellectual content of a text, edition, recording, or series, where the specialized elements for authors, editors, etc. do not suffice or do not apply. May also be used to encode information about individuals or organizations which have played a role in the production or distribution of a bibliographic work. [3.11.2.2.  2.2.1.  2.2.2.  2.2.5. ]
  element respStmt {
    ((rem_resp+, rem_model.nameLike.agent+)
     | (rem_model.nameLike.agent+, rem_resp+)),
    rem_att.global.attributes,
    rem_att.canonical.attributes,
    empty
  }
rem_resp =
  
  ## (responsibility) contains a phrase describing the nature of a person's intellectual responsibility, or an organization's role in the production or distribution of a work. [3.11.2.2.  2.2.1.  2.2.2.  2.2.5. ]
  element resp {
    rem_macro.phraseSeq.limited,
    rem_att.global.attributes,
    rem_att.canonical.attributes,
    rem_att.datable.attributes,
    empty
  }
rem_title =
  
  ## contains a title for any kind of work. [3.11.2.2.  2.2.1.  2.2.5. ]
  element title {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.canonical.attributes,
    rem_att.typed.attribute.subtype,
    
    ## classifies the title according to some convenient typology.
    ## Beispielwerte sind etwa: 1] main; 2] sub(subordinate) ; 3] alt(alternate) ; 4] short; 5] desc(descriptive) 
    attribute type { rem_data.enumerated }?,
    
    ## indicates the bibliographic level for a title, that is, whether it identifies an article, book, journal, series, or unpublished material.
    attribute level {
      
      ## (analytic) the title applies to an analytic item, such as an article, poem, or other work published as part of a larger item.
      "a"
      | 
        ## (monographic) the title applies to a monograph such as a book or other item considered to be a distinct publication, including single volumes of multi-volume works
        "m"
      | 
        ## (journal) the title applies to any serial or periodical publication such as a journal, magazine, or newspaper
        "j"
      | 
        ## (series) the title applies to a series of otherwise distinct publications such as a collection
        "s"
      | 
        ## (unpublished) the title applies to any unpublished material (including theses and dissertations unless published by a commercial press)
        "u"
    }?,
    empty
  }
rem_meeting =
  
  ## contains the formalized descriptive title for a meeting or conference, for use in a bibliographic description for an item derived from such a meeting, or as a heading or preamble to publications emanating from it. [3.11.2.2. ]
  element meeting {
    rem_macro.limitedContent,
    rem_att.global.attributes,
    rem_att.canonical.attributes,
    empty
  }
rem_imprint =
  
  ## groups information relating to the publication or distribution of a bibliographic item. [3.11.2.4. ]
  element imprint {
    ((rem_classCode | rem_catRef)*,
     ((rem_model.imprintPart | rem_model.dateLike),
      rem_respStmt*,
      rem_model.global*)+),
    rem_att.global.attributes,
    empty
  }
rem_publisher =
  
  ## provides the name of the organization responsible for the publication or distribution of a bibliographic item. [3.11.2.4.  2.2.4. ]
  element publisher {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_biblScope =
  
  ## (scope of bibliographic reference) defines the scope of a bibliographic reference, for example as a list of page numbers, or a named subdivision of a larger work. [3.11.2.5. ]
  element biblScope {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.citing.attributes,
    
    ## identifies the type of information conveyed by the element, e.g. columns, pages, volume.
    ## Empfohlene Werte sind: 1] vol(volume) ; 2] issue; 3] pp(pages) ; 4] ll(lines) ; 5] chap(chapter) ; 6] part
    attribute type {
      
      ## (volume) the element contains a volume number.
      "vol"
      | 
        ## the element contains an issue number, or volume and issue numbers.
        "issue"
      | 
        ## (pages) the element contains a page number or page range.
        "pp"
      | 
        ## (lines) the element contains a line number or line range.
        "ll"
      | 
        ## (chapter) the element contains a chapter indication (number and/or title)
        "chap"
      | 
        ## the element identifies a part of a book or collection.
        "part"
      | xsd:Name
    }?,
    empty
  }
rem_citedRange =
  
  ## (cited range) defines the range of cited content, often represented by pages or other units [3.11.2.5. ]
  element citedRange {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.pointing.attributes,
    rem_att.citing.attributes,
    empty
  }
rem_pubPlace =
  
  ## (publication place) contains the name of the place where a bibliographic item was published. [3.11.2.4. ]
  element pubPlace {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_bibl =
  
  ## (bibliographic citation) contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. [3.11.1.  2.2.7.  15.3.2. ]
  element bibl {
    (text
     | rem_model.gLike
     | rem_model.highlighted
     | rem_model.pPart.data
     | rem_model.pPart.edit
     | rem_model.segLike
     | rem_model.ptrLike
     | rem_model.biblPart
     | rem_model.global)*,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    rem_att.typed.attributes,
    rem_att.sortable.attributes,
    rem_att.docStatus.attributes,
    empty
  }
rem_biblStruct =
  
  ## (structured bibliographic citation) contains a structured bibliographic citation, in which only bibliographic sub-elements appear and in a specified order. [3.11.1.  2.2.7.  15.3.2. ]
  element biblStruct {
    (rem_analytic*,
     (rem_monogr, rem_series*)+,
     (rem_model.noteLike
      | rem_idno
      | rem_model.ptrLike
      | rem_relatedItem
      | rem_citedRange)*),
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    rem_att.typed.attributes,
    rem_att.sortable.attributes,
    rem_att.docStatus.attributes,
    empty
  }
rem_listBibl =
  
  ## (citation list) contains a list of bibliographic citations of any kind. [3.11.1.  2.2.7.  15.3.2. ]
  element listBibl {
    (rem_model.headLike*,
     (rem_model.biblLike | rem_model.milestoneLike)+,
     (rem_relation | rem_listRelation)*),
    rem_att.global.attributes,
    rem_att.sortable.attributes,
    rem_att.declarable.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_relatedItem =
  
  ## contains or references some other bibliographic item which is related to the present one in some specified manner, for example as a constituent or alternative version of it. [3.11.2.7. ]
  element relatedItem {
    ((rem_model.biblLike | rem_model.ptrLike)?)
    >> sch:pattern [
         id = "rem-basel-relatedItem-targetorcontent1-constraint-3"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relatedItem"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and count( child::* ) > 0"
             "\x{a}" ~
             "If the @target attribute on "
             sch:name [ ]
             " is used, the\x{a}" ~
             "relatedItem element must be empty"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "rem-basel-relatedItem-targetorcontent1-constraint-6"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relatedItem"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@target or child::*"
             "A relatedItem element should have either a 'target' attribute\x{a}" ~
             "        or a child element to indicate the related bibliographic item"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.typed.attributes,
    
    ## points to the related bibliographic element by means of an absolute or relative URI reference
    attribute target { rem_data.pointer }?,
    empty
  }
rem_l =
  
  ## (verse line) contains a single, possibly incomplete, line of verse. [3.12.1.  3.12.  7.2.5. ]
  element l {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.fragmentable.attributes,
    empty
  }
rem_lg =
  
  ## (line group) contains one or more verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. [3.12.1.  3.12.  7.2.5. ]
  element lg {
    ((rem_model.divTop | rem_model.global)*,
     (rem_model.lLike
      | rem_model.stageLike
      | rem_model.labelLike
      | rem_lg),
     (rem_model.lLike
      | rem_model.stageLike
      | rem_model.labelLike
      | rem_model.global
      | rem_lg)*,
     (rem_model.divBottom, rem_model.global*)*)
    >> sch:pattern [
         id = "rem-basel-lg-atleast1oflggapl-constraint-7"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:lg"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count(descendant::tei:lg|descendant::tei:l|descendant::tei:gap) > 0"
             "An lg element\x{a}" ~
             "        must contain at least one child l, lg or gap element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.divLike.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_sp =
  
  ## (speech) contains an individual speech in a performance text, or a passage presented as such in a prose or verse text. [3.12.2.  3.12.  7.2.2. ]
  element sp {
    (rem_model.global*,
     (rem_speaker, rem_model.global*)?,
     ((rem_lg
       | rem_model.lLike
       | rem_model.pLike
       | rem_model.listLike
       | rem_model.stageLike
       | rem_model.qLike),
      rem_model.global*)+),
    rem_att.global.attributes,
    rem_att.ascribed.attributes,
    empty
  }
rem_speaker =
  
  ## contains a specialized form of heading or label, giving the name of one or more speakers in a dramatic text or fragment. [3.12.2. ]
  element speaker {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_stage =
  
  ## (stage direction) contains any kind of stage direction within a dramatic text or fragment. [3.12.2.  3.12.  7.2.4. ]
  element stage {
    rem_macro.specialPara,
    rem_att.ascribed.attributes,
    rem_att.global.attributes,
    rem_att.placement.attributes,
    
    ## indicates the kind of stage direction.
    ## Empfohlene Werte sind: 1] setting; 2] entrance; 3] exit; 4] business; 5] novelistic; 6] delivery; 7] modifier; 8] location; 9] mixed
    attribute type {
      
      ## describes a setting.
      "setting"
      | 
        ## describes an entrance.
        "entrance"
      | 
        ## describes an exit.
        "exit"
      | 
        ## describes stage business.
        "business"
      | 
        ## is a narrative, motivating stage direction.
        "novelistic"
      | 
        ## describes how a character speaks.
        "delivery"
      | 
        ## gives some detail about a character.
        "modifier"
      | 
        ## describes a location.
        "location"
      | 
        ## more than one of the above
        "mixed"
      | xsd:Name
    }?,
    empty
  }
rem_teiCorpus =
  
  ## contains the whole of a TEI encoded corpus, comprising a single corpus header and one or more TEI elements, each containing a single text header and a text. [4.  15.1. ]
  element teiCorpus {
    (rem_teiHeader,
     ((rem_model.resourceLike+, (rem_TEI | rem_teiCorpus)*)
      | (rem_TEI | rem_teiCorpus)+)),
    rem_att.global.attributes,
    
    ## The version of the TEI scheme
    [ a:defaultValue = "5.0" ] attribute version { rem_data.version }?,
    empty
  }
rem_divGen =
  
  ## (automatically generated text division) indicates the location at which a textual division generated automatically by a text-processing application is to appear. [3.8.2. ]
  element divGen {
    rem_model.headLike*,
    rem_att.global.attributes,
    
    ## specifies what type of generated text division (e.g. index, table of contents, etc.) is to appear.
    ## Beispielwerte sind etwa: 1] index; 2] toc; 3] figlist; 4] tablist
    attribute type { rem_data.enumerated }?,
    empty
  }
rem_textLang =
  
  ## (text language) describes the languages and writing systems identified within the bibliographic work being described, rather than its description. [3.11.2.4.  10.6.6. ]
  element textLang {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    
    ## (main language) supplies a code which identifies the chief language used in the bibliographic work.
    attribute mainLang { rem_data.language }?,
    
    ## (other languages) one or more codes identifying any other languages used in the bibliographic work.
    attribute otherLangs {
      list { rem_data.language* }
    }?,
    empty
  }
rem_att.patternReplacement.attributes =
  rem_att.patternReplacement.attribute.matchPattern,
  rem_att.patternReplacement.attribute.replacementPattern
rem_att.patternReplacement.attribute.matchPattern =
  
  ## specifies a regular expression against which the values of other attributes can be matched.
  attribute matchPattern { rem_data.pattern }
rem_att.patternReplacement.attribute.replacementPattern =
  
  ## beschreibt ein replacement pattern (Ersetzungsmuster), das eine URI erstellt, sobald der Austausch der untergeordneten Ersetzungsmuster durchgeführt wurde.
  attribute replacementPattern { rem_data.replacement }
rem_teiHeader =
  
  ## (TEI-Header (elektronische Titelseite)) Beschreibungen und Erklärungen, die eine elektronische Titelseite für ein TEI-konformes Dokument ergeben. [2.1.1.  15.1. ]
  element teiHeader {
    (rem_fileDesc, rem_model.teiHeaderPart*, rem_revisionDesc?),
    rem_att.global.attributes,
    
    ## beschreibt die Art des Dokuments, zu dem der Header gehört
    ## Beispielwerte sind etwa: 1] text; 2] corpus
    [ a:defaultValue = "text" ] attribute type { rem_data.enumerated }?,
    empty
  }
rem_fileDesc =
  
  ## (Dateibeschreibung) enthält die detaillierte bibliografische Beschreibung einer elektronischen Datei. [2.2.  2.1.1. ]
  element fileDesc {
    ((rem_titleStmt,
      rem_editionStmt?,
      rem_extent?,
      rem_publicationStmt,
      rem_seriesStmt?,
      rem_notesStmt?),
     rem_sourceDesc+),
    rem_att.global.attributes,
    empty
  }
rem_titleStmt =
  
  ## ( Titelinformation) umfasst Angaben zum Titel eines Werks und zu den für seinen Inhalt Verantwortlichen [2.2.1.  2.2. ]
  element titleStmt {
    (rem_title+, rem_model.respLike*), rem_att.global.attributes, empty
  }
rem_sponsor =
  
  ## gibt den Namen einer Organisation oder Institution an, die als finanzieller Förderer auftritt [2.2.1. ]
  element sponsor {
    rem_macro.phraseSeq.limited,
    rem_att.global.attributes,
    rem_att.canonical.attributes,
    empty
  }
rem_funder =
  
  ## (Finanzier) gibt den Namen einer Einzelperson, Institution oder Organisation an, die für die Finanzierung eines Projects oder Textes verantwortlich ist. [2.2.1. ]
  element funder {
    rem_macro.phraseSeq.limited,
    rem_att.global.attributes,
    rem_att.canonical.attributes,
    empty
  }
rem_principal =
  
  ## (Projektleiter) gibt den Namen des Mitarbeiters an, der hauptsächlich für die Herstellung eines elektronischen Textes verantwortlich ist. [2.2.1. ]
  element principal {
    rem_macro.phraseSeq.limited,
    rem_att.global.attributes,
    rem_att.canonical.attributes,
    empty
  }
rem_editionStmt =
  
  ## (Erklärung zur Edition) umfasst die Angaben zu einer Edition eines Textes. [2.2.2.  2.2. ]
  element editionStmt {
    (rem_model.pLike+ | (rem_edition, rem_model.respLike*)),
    rem_att.global.attributes,
    empty
  }
rem_edition =
  
  ## (Edition) beschreibt die Besonderheiten einer Edition eines Textes. [2.2.2. ]
  element edition {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_extent =
  
  ## beschreibt die ungefähre Größe des elektronischen Texts, die er auf einem Datenträger einnimmt (Angabe in entsprechenden Maßeinheiten). [2.2.3.  2.2.  3.11.2.4.  10.7.1. ]
  element extent {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_publicationStmt =
  
  ## (Erklärung zum Status der Veröffentlichung ) umfasst Angaben zu Veröffentlichung oder Vertrieb eines elektronischen oder sonstigen Texts. [2.2.4.  2.2. ]
  element publicationStmt {
    ((rem_model.publicationStmtPart.agency,
      rem_model.publicationStmtPart.detail*)+
     | rem_model.pLike+),
    rem_att.global.attributes,
    empty
  }
rem_distributor =
  
  ## gibt die Person oder Stelle an, die für den Vertrieb des Texts verantwortlich ist. [2.2.4. ]
  element distributor {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_authority =
  
  ## (Freigabeinstanz) gibt die Person oder Stelle (außer Verlag oder Vertrieb) an, die für die Zugang zu einer elektronischen Datei verantwortlich ist. [2.2.4. ]
  element authority {
    rem_macro.phraseSeq.limited, rem_att.global.attributes, empty
  }
rem_idno =
  
  ## (Identifikationsnummer) gibt eine standardisierte oder nicht standardisierte Nummer an, die genutzt wird um einen Text bibliografisch eindeutig zu identifizieren [2.2.4.  2.2.5.  3.11.2.4. ]
  element idno {
    (text | rem_model.gLike | rem_idno)*,
    rem_att.global.attributes,
    rem_att.sortable.attributes,
    
    ## bestimmt die Nummer, zum Beispiel als ISBN-Nummer oder als eine andere Standardseriennummer.
    attribute type { rem_data.enumerated }?,
    empty
  }
rem_availability =
  
  ## beschreibt die Nutzbarkeit eines Textes, zum Beispiel Einschränkungen den Gebrauch oder die Weitergabe betreffend, den Copyright-Status usw. [2.2.4. ]
  element availability {
    (rem_model.availabilityPart | rem_model.pLike)+,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    
    ## gibt einen Kode an, der die derzeitige Nutzbarkeit eines Textes festlegt.
    [ a:defaultValue = "unknown" ]
    attribute status {
      
      ## the text is freely available.
      "free"
      | 
        ## the status of the text is unknown.
        "unknown"
      | 
        ## the text is not freely available.
        "restricted"
    }?,
    empty
  }
rem_licence =
  
  ## contains information about a licence or other legal agreement applicable to the text. [2.2.4. ]
  element licence {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.pointing.attributes,
    rem_att.datable.attributes,
    empty
  }
rem_seriesStmt =
  
  ## (Erklärung zu einer Publikationsreihe) umfasst (wenn nötig) Angaben zu einer Reihe, zu der eine Veröffentlichung gehört [2.2.5.  2.2. ]
  element seriesStmt {
    (rem_model.pLike+
     | (rem_title+,
        (rem_editor | rem_respStmt)*,
        (rem_idno | rem_biblScope)*)),
    rem_att.global.attributes,
    empty
  }
rem_notesStmt =
  
  ## (Erklärung zu Anmerkungen) fasst weitere Anmerkungen mit Informationen über den Text zusammen, zusätzlich zu den Informationen, die in anderen Teilen der bibliografischen Beschreibung bereits festgehalten sind. [2.2.6.  2.2. ]
  element notesStmt {
    (rem_model.noteLike | rem_relatedItem)+,
    rem_att.global.attributes,
    empty
  }
rem_sourceDesc =
  
  ## (source description) beschreibt den (die) Quelltext(e), von dem (denen) der elektronische Text abstammt oder erzeugt wurde. [2.2.7. ]
  element sourceDesc {
    (rem_model.pLike+
     | (rem_model.biblLike
        | rem_model.sourceDescPart
        | rem_model.listLike)+),
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    empty
  }
rem_biblFull =
  
  ## (fully-structured bibliographic citation) contains a fully-structured bibliographic citation, in which all components of the TEI file description are present. [3.11.1.  2.2.  2.2.7.  15.3.2. ]
  element biblFull {
    ((rem_titleStmt,
      rem_editionStmt?,
      rem_extent?,
      rem_publicationStmt,
      rem_seriesStmt?,
      rem_notesStmt?),
     rem_sourceDesc*),
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    rem_att.sortable.attributes,
    rem_att.docStatus.attributes,
    empty
  }
rem_encodingDesc =
  
  ## (Beschreibung der Kodierung ) dokumentiert das Verhältnis zwischen dem elektronischen Text und seiner Quelle oder den Quellen, von der oder von denen er abstammt [2.3.  2.1.1. ]
  element encodingDesc {
    (rem_model.encodingDescPart | rem_model.pLike)+,
    rem_att.global.attributes,
    empty
  }
rem_projectDesc =
  
  ## (Beschreibung des Projekts) beschreibt detailliert Ziel bzw. Zweck, für den eine Datei kodiert wurde, zusammen mit weiteren relevanten Informationen, die das Verfahren betreffen, nach dem die Daten zusammengestellt oder gesammelt wurden [2.3.1.  2.3.  15.3.2. ]
  element projectDesc {
    rem_model.pLike+,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    empty
  }
rem_samplingDecl =
  
  ## (Beschreibung des Auswahlverfahrens) enthält eine Beschreibung der Kriterien und Methoden, nach denen die Textsamples für ein Korpus oder eine Sammlung ausgewählt wurden. [2.3.2.  2.3.  15.3.2. ]
  element samplingDecl {
    rem_model.pLike+,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    empty
  }
rem_editorialDecl =
  
  ## (Beschreibung der Editionsprinzipien) beschreibt Einzelheiten der Editionsprinzipien und Verfahren, die bei der Kodierung des Textes angewandt wurden. [2.3.3.  2.3.  15.3.2. ]
  element editorialDecl {
    (rem_model.pLike | rem_model.editorialDeclPart)+,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    empty
  }
rem_correction =
  
  ## (Korrekturverfahren) gibt an, wie und unter welchen Bedingungen Korrekturen an dem Text vorgenommen wurden. [2.3.3.  15.3.2. ]
  element correction {
    rem_model.pLike+,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    
    ## gibt Auskunft über das Ausmaß von Korrekturen, die an dem Text vorgenommen wurden.
    [ a:defaultValue = "unknown" ]
    attribute status {
      
      ## the text has been thoroughly checked and proofread.
      "high"
      | 
        ## the text has been checked at least once.
        "medium"
      | 
        ## the text has not been checked.
        "low"
      | 
        ## the correction status of the text is unknown.
        "unknown"
    }?,
    
    ## Bezeichnet die Methode, die angewandt wurde um Korrekturen im Text zu kennzeichnen.
    [ a:defaultValue = "silent" ]
    attribute method {
      
      ## corrections have been made silently
      "silent"
      | 
        ## corrections have been represented using markup
        "markup"
    }?,
    empty
  }
rem_normalization =
  
  ## gibt an, in welchem Ausmaß das Original bei der Umwandlung in elektronische Form normalisiert und vereinheitlicht wurde. [2.3.3.  15.3.2. ]
  element normalization {
    rem_model.pLike+,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    
    ## nennt die für die Normalisierung verantwortliche Instanz
    attribute source { rem_data.pointer }?,
    
    ## bezeichnet die Methode, die angewandt wurde um Normalisierungen im Text kenntlich zu machen.
    [ a:defaultValue = "silent" ]
    attribute method {
      
      ## normalization made silently
      "silent"
      | 
        ## normalization represented using markup
        "markup"
    }?,
    empty
  }
rem_quotation =
  
  ## beschreibt die editorische Praxis bezüglich der Anführungszeichen im Originaltext. [2.3.3.  15.3.2. ]
  element quotation {
    (rem_model.pLike*)
    >> sch:pattern [
         id = "rem-basel-quotation-quotationContents-constraint-4"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:quotation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "not(@marks) and not (tei:p)"
             "\x{a}" ~
             "On "
             sch:name [ ]
             ", either the @marks attribute should be used, or a paragraph of description provided"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    
    ## (quotation marks) gibt an, ob Anführungszeichen als Bestandteil des Textes beibehalten wurden.
    attribute marks {
      
      ## no quotation marks have been retained
      "none"
      | 
        ## some quotation marks have been retained
        "some"
      | 
        ## all quotation marks have been retained
        "all"
    }?,
    empty
  }
rem_hyphenation =
  
  ## fasst zusammen, wie die Silbentrennung des Quelltextes in der kodierten Fassung behandelt wurde. [2.3.3.  15.3.2. ]
  element hyphenation {
    rem_model.pLike+,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    
    ## (end-of-line) gibt an, ob die Silbentrennung am Zeilenende im Text beibehalten wurde.
    [ a:defaultValue = "some" ]
    attribute eol {
      
      ## all end-of-line hyphenation has been retained, even though the lineation of the original may not have been.
      "all"
      | 
        ## end-of-line hyphenation has been retained in some cases.
        "some"
      | 
        ## all soft end-of-line hyphenation has been removed: any remaining end-of-line hyphenation should be retained.
        "hard"
      | 
        ## all end-of-line hyphenation has been removed: any remaining hyphenation occurred within the line.
        "none"
    }?,
    empty
  }
rem_segmentation =
  
  ## gibt an, nach welchen Prinzipien ein Text segmentiert wurde, zum Beispiel in Sätze, Tonsequenzen, graphemische Einheiten, usw. [2.3.3.  15.3.2. ]
  element segmentation {
    rem_model.pLike+,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    empty
  }
rem_stdVals =
  
  ## (Standardwerte) beschreibt das Format, das für Standard-Datumsangaben oder Zahlenwerte genutzt wird. [2.3.3.  15.3.2. ]
  element stdVals {
    rem_model.pLike+,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    empty
  }
rem_interpretation =
  
  ## beschreibt den Umfang von Analyse oder Interpretation, die zusätzlich zur Transkription dem Text hinzugefügt wurde. [2.3.3. ]
  element interpretation {
    rem_model.pLike+,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    empty
  }
rem_punctuation =
  
  ## specifies editorial practice adopted with respect to punctuation marks in the original. [2.3.3.  3.2. ]
  element punctuation {
    rem_model.pLike*,
    rem_att.declarable.attributes,
    rem_att.global.attributes,
    
    ## indicates whether or not punctation marks have been retained as content within the text.
    attribute marks {
      
      ## no punctuation marks have been retained
      "none"
      | 
        ## some punctuation marks have been retained
        "some"
      | 
        ## all punctuation marks have been retained
        "all"
    }?,
    
    ## indicates whether punctation marks have been captured inside or outside of an adjacent element.
    attribute placement {
      
      ## punctuation marks are captured inside adjacent elements
      "internal"
      | 
        ## punctuation marks are captured outside adjacent elements
        "external"
    }?,
    empty
  }
rem_tagsDecl =
  
  ## (Beschreibung des Tag-Gebrauchs ) liefert detaillierte Angaben zum Gebrauch von Tags in einem SGML- oder XML-Dokument. [2.3.4.  2.3. ]
  element tagsDecl {
    (rem_rendition*, rem_namespace*), rem_att.global.attributes, empty
  }
rem_tagUsage =
  
  ## beschreibt den Gebrauch eines speziellen Elements in einem Text. [2.3.4. ]
  element tagUsage {
    rem_macro.limitedContent,
    rem_att.global.attributes,
    
    ## (generic identifier) die Bezeichnung (generischer Bezeichner) des durch das Tag gekennzeichneten Elements.
    attribute gi { rem_data.name },
    
    ## gibt an, wie oft das Element im Text vorkommt
    attribute occurs { rem_data.count }?,
    
    ## (with unique identifier) gibt an, wie oft dieses Element mit einem bestimmten Wert für das globale Attribut xml:id im Text vorkommt.
    attribute withId { rem_data.count }?,
    
    ## beschreibt den Bezeichner für ein rendition -Element, das festlegt, wie dieses Element wiedergegeben werden soll.
    attribute render {
      list { rem_data.pointer+ }
    }?,
    empty
  }
rem_namespace =
  
  ## liefert die formale Bezeichnung des Namensraums an, zu dem die Elemente als Kind-Elemente gehören. [2.3.4. ]
  element namespace {
    rem_tagUsage+,
    rem_att.global.attributes,
    
    ## die vollständige formale Bezeichnung des betreffenden Namensraums.
    attribute name { rem_data.namespace },
    empty
  }
rem_rendition =
  
  ## gibt an, wie ein oder mehrere Elemente wiedergegeben werden sollen. [2.3.4. ]
  element rendition {
    rem_macro.limitedContent,
    rem_att.global.attributes,
    rem_att.styleDef.attributes,
    
    ## where CSS is used, provides a way of defining pseudo-elements, that is, styling rules applicable to specific sub-portions of an element.
    ## Beispielwerte sind etwa: 1] first-line; 2] first-letter; 3] before; 4] after
    attribute scope { rem_data.enumerated }?,
    empty
  }
rem_styleDefDecl =
  
  ## (style definition language declaration) specifies the name of the formal language in which style or renditional information is supplied elsewhere in the document. The specific version of the scheme may also be supplied. [2.3.5. ]
  element styleDefDecl {
    rem_model.pLike*,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    rem_att.styleDef.attributes,
    empty
  }
rem_refsDecl =
  
  ## (Beschreibung der Referenzstruktur) beschreibt, wie Standard-Referenzen für den Text erstellt werden. [2.3.6.3.  2.3.  2.3.6. ]
  element refsDecl {
    (rem_model.pLike+ | rem_cRefPattern+ | rem_refState+),
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    empty
  }
rem_cRefPattern =
  
  ## (legt fest, wie eine Standardreferenz in eine URI
  ##     umgewandelt werden kann.) legt einen Ausdruck und ein Ersetzungsmuster für die Umwandlung einer Standardreferenz in eine URI fest. [2.3.6.3.  2.3.6.  2.3.6.2. ]
  element cRefPattern {
    rem_model.pLike*,
    rem_att.global.attributes,
    rem_att.patternReplacement.attributes,
    empty
  }
rem_prefixDef =
  
  ## (prefixing scheme used in data.pointer values) defines a prefixing scheme used in data.pointer values, showing how abbreviated URIs using the scheme may be expanded into full URIs. [16.2.3. ]
  element prefixDef {
    rem_model.pLike*,
    rem_att.global.attributes,
    rem_att.patternReplacement.attributes,
    
    ## supplies a name which functions as the prefix for an abbreviated pointing scheme such as a private URI scheme. The prefix constitutes the text preceding the first colon.
    attribute ident { rem_data.name },
    empty
  }
rem_listPrefixDef =
  
  ## (list of prefix definitions) contains a list of definitions of prefixing schemes used in data.pointer values, showing how abbreviated URIs using each scheme may be expanded into full URIs. [16.2.3. ]
  element listPrefixDef {
    (rem_prefixDef | rem_listPrefixDef)+,
    rem_att.global.attributes,
    empty
  }
rem_refState =
  
  ## (reference state) specifies one component of a canonical reference defined by the milestone method. [2.3.6.3.  2.3.6. ]
  element refState {
    empty,
    rem_att.global.attributes,
    rem_att.milestoneUnit.attributes,
    rem_att.edition.attributes,
    
    ## specifies the fixed length of the reference component.
    attribute length { rem_data.count }?,
    
    ## (delimiter) supplies a delimiting string following the reference component.
    attribute delim { rem_data.text }?,
    empty
  }
rem_classDecl =
  
  ## (Erklärung zur Klassifikation) enthält eine oder mehrere Taxonomien, die Klassifikationen innerhalb des Textes definieren. [2.3.7.  2.3. ]
  element classDecl { rem_taxonomy+, rem_att.global.attributes, empty }
rem_taxonomy =
  
  ## Typologie, die Texte entweder implizit durch einen bibliografischen Verweis oder explizit durch eine strukturierte Taxonomie klassifiziert. [2.3.7. ]
  element taxonomy {
    ((rem_model.glossLike | rem_model.descLike)*
     | rem_category+
     | (rem_model.biblLike, rem_category*)),
    rem_att.global.attributes,
    empty
  }
rem_category =
  
  ## enthält eine eigenständige deskriptive Kategorie, gegebenenfalls eingebettet in einer übergeordneten Kategorie, in einer benutzerdefinierten Taxonomie. [2.3.7. ]
  element category {
    ((rem_catDesc+ | (rem_model.descLike | rem_model.glossLike)*),
     rem_category*),
    rem_att.global.attributes,
    empty
  }
rem_catDesc =
  
  ## (Beschreibung der Kategorie) Kategorie innerhalb einer Taxonomie oder Texttypologie, entweder als einfache Beschreibung oder über situative Parameter, wie im TEI-Format textDesc dargestellt. [2.3.7. ]
  element catDesc {
    (text | rem_model.limitedPhrase | rem_model.catDescPart)*,
    rem_att.global.attributes,
    empty
  }
rem_geoDecl =
  
  ## (geographic coordinates declaration) documents the notation and the datum used for geographic coordinates expressed as content of the geo element elsewhere within the document. [2.3.8. ]
  element geoDecl {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    
    ## supplies a commonly used code name for the datum employed.
    ## Empfohlene Werte sind: 1] WGS84(World Geodetic System) ; 2] MGRS(Military Grid Reference System) ; 3] OSGB36(ordnance survey great britain) ; 4] ED50(European Datum coordinate system) 
    [ a:defaultValue = "WGS84" ]
    attribute datum {
      
      ## (World Geodetic System) a pair of numbers to be interpreted as latitude followed by longitude according to the World Geodetic System.
      "WGS84"
      | 
        ## (Military Grid Reference System) the values supplied are geospatial entity object codes, based on
        "MGRS"
      | 
        ## (ordnance survey great britain) the value supplied is to be interpreted as a British National Grid Reference.
        "OSGB36"
      | 
        ## (European Datum coordinate system) the value supplied is to be interpreted as latitude followed by longitude according to the European Datum coordinate system.
        "ED50"
      | xsd:Name
    }?,
    empty
  }
rem_appInfo =
  
  ## (application information) records information about an application which has edited the TEI file. [2.3.10. ]
  element appInfo {
    rem_model.applicationLike+, rem_att.global.attributes, empty
  }
rem_application =
  
  ## provides information about an application which has acted upon the document. [2.3.10. ]
  element application {
    (rem_model.labelLike+, (rem_model.ptrLike* | rem_model.pLike*)),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.datable.attributes,
    
    ## supplies an identifier for the application, independent of its version number or display name.
    attribute ident { rem_data.name },
    
    ## supplies a version number for the application, independent of its identifier or display name.
    attribute version { rem_data.versionNumber },
    empty
  }
rem_profileDesc =
  
  ## (Beschreibung des Textprofils) enthält eine genaue Beschreibung der nicht bibliografischen Kennzeichnungen des Texts, besonders der verwendeten Sprachen und Subsprachen, der Entstehungsbedingungen, der Teilnehmer und ihres Umfelds. [2.4.  2.1.1. ]
  element profileDesc {
    rem_model.profileDescPart*, rem_att.global.attributes, empty
  }
rem_handNote =
  
  ## (note on hand) describes a particular style or hand distinguished within a manuscript. [10.7.2. ]
  element handNote {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.handFeatures.attributes,
    empty
  }
rem_abstract =
  
  ## contains a summary or formal abstract prefixed to an existing source document by the encoder. [2.4.4. ]
  element abstract {
    (rem_model.pLike | rem_model.listLike)+,
    rem_att.global.attributes,
    rem_att.responsibility.attributes,
    empty
  }
rem_creation =
  
  ## Informationen über die Entstehungsbedingungen des Textes. [2.4.1.  2.4. ]
  element creation {
    (text | rem_model.limitedPhrase | rem_listChange)*,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    empty
  }
rem_langUsage =
  
  ## ( Sprachgebrauch) beschreibt Sprachen, Subsprachen, Register, Dialekte usw., die innerhalb eines Textes vorkommen. [2.4.2.  2.4.  15.3.2. ]
  element langUsage {
    rem_language+,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    empty
  }
rem_language =
  
  ## bestimmt eine einzelne Sprache oder Subsprache in einem Text. [2.4.2. ]
  element language {
    rem_macro.phraseSeq.limited,
    rem_att.global.attributes,
    
    ## (identifier) gibt einen Sprachschlüssel an, aufgebaut nach RFC 3066 (oder dessen Fortsetzung), der zur Angabe der im Element festgehaltenen Sprache benutzt wird, und auf den das globale xml:lang -Attribut verweist.
    attribute ident { rem_data.language },
    
    ## gibt den ungefähren Prozentsatz (nach Umfang) für die Verwendung dieser Sprache im Text an.
    attribute usage {
      xsd:nonNegativeInteger { maxInclusive = "100" }
    }?,
    empty
  }
rem_textClass =
  
  ## (Textklassifikation) umfasst Informationen über Art oder Thematik eines Texts unter Bezug auf ein Standard-Klassifikationsschema, einen Thesaurus, usw. [2.4.3. ]
  element textClass {
    (rem_classCode | rem_catRef | rem_keywords)*,
    rem_att.global.attributes,
    rem_att.declarable.attributes,
    empty
  }
rem_keywords =
  
  ## enthält Zusammenstellung von Schlüsselwörtern oder –phrasen zu Art und Thematik des Textes. [2.4.3. ]
  element keywords {
    (rem_term+ | rem_list),
    rem_att.global.attributes,
    
    ## gibt das festgesetzte Vokabular an, mit dem die zusammengestellten Schlüsselwörter definiert sind.
    attribute scheme { rem_data.pointer }?,
    empty
  }
rem_classCode =
  
  ## (Klassifizierungsschlüssel) enthält den Klassifizierungsschlüssel entsprechend einem Standard-Klassifizierungssystems. [2.4.3. ]
  element classCode {
    rem_macro.phraseSeq.limited,
    rem_att.global.attributes,
    
    ## Gibt an welches Klassifizierungssystem oder welche Taxonomie benutzt wird.
    attribute scheme { rem_data.pointer },
    empty
  }
rem_catRef =
  
  ## (Verweis auf eine Kategorie) gibt eine oder mehrere Kategorien an, die innerhalb einer Taxonomie oder Texttypologie definiert sind. [2.4.3. ]
  element catRef {
    empty,
    rem_att.global.attributes,
    rem_att.pointing.attributes,
    
    ## gibt das Klassifikationsschema an, in dem die entsprechenden Kategorien definiert sind.
    attribute scheme { rem_data.pointer }?,
    empty
  }
rem_calendarDesc =
  
  ## (calendar description) contains a description of the calendar system used in any dating expression found in the text. [2.4.  2.4.5. ]
  element calendarDesc {
    rem_calendar+, rem_att.global.attributes, empty
  }
rem_calendar =
  
  ## describes a calendar or dating system used in a dating formula in the text. [2.4.5. ]
  element calendar {
    rem_model.pLike+,
    rem_att.global.attributes,
    rem_att.pointing.attributes,
    empty
  }
rem_revisionDesc =
  
  ## (Beschreibung der Textrevision) enthällt alle Revisionsschritte, die an der Datei vorgenommen wurden. [2.5.  2.1.1. ]
  element revisionDesc {
    (rem_list | rem_listChange | rem_change+),
    rem_att.global.attributes,
    rem_att.docStatus.attributes,
    empty
  }
rem_change =
  
  ## gibt eine bestimmte Veränderung oder Korrektur an einer bestimmten Version eines elektronischen Textes an, an der verschiedene Bearbeiter beteiligt sind. [2.5.  2.4.1.  11.7. ]
  element change {
    rem_macro.specialPara,
    rem_att.ascribed.attributes,
    rem_att.datable.attributes,
    rem_att.docStatus.attributes,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    
    ## points to one or more elements that belong to this change.
    attribute target {
      list { rem_data.pointer+ }
    }?,
    empty
  }
rem_typeNote =
  
  ## describes a particular font or other significant typographic feature distinguished within the description of a printed resource. [10.7.2. ]
  element typeNote {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.handFeatures.attributes,
    empty
  }
rem_scriptNote =
  
  ## describes a particular script distinguished within the description of a manuscript or similar resource. [10.7.2. ]
  element scriptNote {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.handFeatures.attributes,
    empty
  }
rem_listChange =
  
  ## groups a number of change descriptions associated with either the creation of a source text or the revision of an encoded text. [2.5.  11.7. ]
  element listChange {
    (rem_listChange | rem_change)+,
    rem_att.global.attributes,
    rem_att.sortable.attributes,
    
    ## indicates whether the ordering of its child change elements is to be considered significant or not
    [ a:defaultValue = "true" ]
    attribute ordered { rem_data.truthValue }?,
    empty
  }
rem_TEI =
  
  ## (TEI-Dokument) enthält ein einzelnes TEI-konformes Dokument, das aus TEI-Header (Dateikopf) und Text besteht, entweder als eigenständige Datei oder als Teil eines Elements teiCorpus. [4.  15.1. ]
  element TEI {
    (rem_teiHeader,
     ((rem_model.resourceLike+, rem_text?) | rem_text))
    >> sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
    >> sch:ns [ prefix = "xs" uri = "http://www.w3.org/2001/XMLSchema" ]
    >> sch:ns [
         prefix = "rng"
         uri = "http://relaxng.org/ns/structure/1.0"
       ],
    rem_att.global.attributes,
    
    ## Version des TEI-Schemas
    attribute version { rem_data.version }?,
    empty
  }
rem_text =
  
  ## enthält eigenständigen oder aus mehreren Teilen bestehenden Text, zum Beispiel ein Gedicht oder Drama, eine Sammlung von Aufsätzen, einen Roman, ein Wörterbuch oder eine Auswahl aus einem Korpus [4.  15.1. ]
  element text {
    (rem_model.global*,
     (rem_front, rem_model.global*)?,
     (rem_body | rem_group),
     rem_model.global*,
     (rem_back, rem_model.global*)?),
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_body =
  
  ## ( Kerntext (text body) ) enthält den gesamten, eigenständigen Text, außer Vorspann (front) und Nachspann (back). [4. ]
  element body {
    (rem_model.global*,
     (rem_model.divTop, (rem_model.global | rem_model.divTop)*)?,
     (rem_model.divGenLike,
      (rem_model.global | rem_model.divGenLike)*)?,
     ((rem_model.divLike, (rem_model.global | rem_model.divGenLike)*)+
      | (rem_model.div1Like,
         (rem_model.global | rem_model.divGenLike)*)+
      | ((rem_model.common, rem_model.global*)+,
         ((rem_model.divLike,
           (rem_model.global | rem_model.divGenLike)*)+
          | (rem_model.div1Like,
             (rem_model.global | rem_model.divGenLike)*)+)?)),
     (rem_model.divBottom, rem_model.global*)*),
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_group =
  
  ## enthält den Kerntext eines aus mehreren Einzeltexten bestehenden Textes, (oder eine Reihe solcher Texte), die zusammen als Einheit gesehen werden, zum Beispiel die gesammelten Werke eines Autors, eine Reihe von Prosastücken etc. [4.  4.3.1.  15.1. ]
  element group {
    ((rem_model.divTop | rem_model.global)*,
     ((rem_text | rem_group),
      (rem_text | rem_group | rem_model.global)*),
     rem_model.divBottom*),
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_floatingText =
  
  ## contains a single text of any kind, whether unitary or composite, which interrupts the text containing it at any point and after which the surrounding text resumes. [4.3.2. ]
  element floatingText {
    (rem_model.global*,
     (rem_front, rem_model.global*)?,
     (rem_body | rem_group),
     rem_model.global*,
     (rem_back, rem_model.global*)?),
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_div =
  
  ## ( Textgliederung ) enthält eine Untergliederung von Vorspann (front), Kerntext oder Nachspann (back) eines Textes. [4.1. ]
  element div {
    ((rem_model.divTop | rem_model.global)*,
     ((((rem_model.divLike | rem_model.divGenLike), rem_model.global*)+
       | ((rem_model.common, rem_model.global*)+,
          ((rem_model.divLike | rem_model.divGenLike),
           rem_model.global*)*)),
      (rem_model.divBottom, rem_model.global*)*)?),
    rem_att.global.attributes,
    rem_att.divLike.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_div1 =
  
  ## ( Textgliederungsebene -1 ) enthält die erste Gliederungsebene von Vorspann (front), Kerntext oder Nachspann (back) eines Textes, (gilt als die größte Ebene, sofern div0 nicht benutzt wird. Wird div0 benutzt, ist es die zweitgrößte). [4.1.2. ]
  element div1 {
    ((rem_model.divTop | rem_model.global)*,
     ((((rem_model.div2Like | rem_model.divGenLike), rem_model.global*)+
       | ((rem_model.common, rem_model.global*)+,
          ((rem_model.div2Like | rem_model.divGenLike),
           rem_model.global*)*)),
      (rem_model.divBottom, rem_model.global*)*)?),
    rem_att.global.attributes,
    rem_att.divLike.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_div2 =
  
  ## ( Textgliederungsebene -2 ) enthält die zweite Gliederungsebene von Vorspann (front), Kerntext oder Nachspann (back) eines Textes. [4.1.2. ]
  element div2 {
    ((rem_model.divTop | rem_model.global)*,
     ((((rem_model.div3Like | rem_model.divGenLike), rem_model.global*)+
       | ((rem_model.common, rem_model.global*)+,
          ((rem_model.div3Like | rem_model.divGenLike),
           rem_model.global*)*)),
      (rem_model.divBottom, rem_model.global*)*)?),
    rem_att.global.attributes,
    rem_att.divLike.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_div3 =
  
  ## ( Textgliederungsebene -3 ) enthält die dritte Gliederungsebene von Vorspann (front), Kerntext oder Nachspann (back) eines Textes. [4.1.2. ]
  element div3 {
    ((rem_model.divTop | rem_model.global)*,
     ((((rem_model.div4Like | rem_model.divGenLike), rem_model.global*)+
       | ((rem_model.common, rem_model.global*)+,
          ((rem_model.div4Like | rem_model.divGenLike),
           rem_model.global*)*)),
      (rem_model.divBottom, rem_model.global*)*)?),
    rem_att.global.attributes,
    rem_att.divLike.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_div4 =
  
  ## ( Textgliederungsebene -4 ) "> enthält die vierte Gliederungsebene von Vorspann (front), Kerntext oder Nachspann (back) eines Textes. [4.1.2. ]
  element div4 {
    ((rem_model.divTop | rem_model.global)*,
     ((((rem_model.div5Like | rem_model.divGenLike), rem_model.global*)+
       | ((rem_model.common, rem_model.global*)+,
          ((rem_model.div5Like | rem_model.divGenLike),
           rem_model.global*)*)),
      (rem_model.divBottom, rem_model.global*)*)?),
    rem_att.global.attributes,
    rem_att.divLike.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_div5 =
  
  ## ( Textgliederungsebene -5 ) "> enthält die fünfte Gliederungsebene von Vorspann (front), Kerntext oder Nachspann (back) eines Textes. [4.1.2. ]
  element div5 {
    ((rem_model.divTop | rem_model.global)*,
     ((((rem_model.div6Like | rem_model.divGenLike), rem_model.global*)+
       | ((rem_model.common, rem_model.global*)+,
          ((rem_model.div6Like | rem_model.divGenLike),
           rem_model.global*)*)),
      (rem_model.divBottom, rem_model.global*)*)?),
    rem_att.global.attributes,
    rem_att.divLike.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_div6 =
  
  ## ( Textgliederungsebene -6 ) enthält die sechste Gliederungsebene von Vorspann (front), Kerntext oder Nachspann (back) eines Textes. [4.1.2. ]
  element div6 {
    ((rem_model.divTop | rem_model.global)*,
     ((((rem_model.div7Like | rem_model.divGenLike), rem_model.global*)+
       | ((rem_model.common, rem_model.global*)+,
          ((rem_model.div7Like | rem_model.divGenLike),
           rem_model.global*)*)),
      (rem_model.divBottom, rem_model.global*)*)?),
    rem_att.global.attributes,
    rem_att.divLike.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_div7 =
  
  ## ( Textgliederungsebene -7 ) enthält die kleinste mögliche Untergliederung von Vorspann (front), Kerntext oder Nachspann (back) eines Textes, die größer als ein Absatz ist. [4.1.2. ]
  element div7 {
    ((rem_model.divTop | rem_model.global)*,
     ((rem_model.common, rem_model.global*)+,
      (rem_model.divBottom, rem_model.global*)*)?),
    rem_att.global.attributes,
    rem_att.divLike.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_trailer =
  
  ## enthält Schlusstitel oder Fußzeile am Ende einer Untergliederung des Textes. [4.2.4.  4.2. ]
  element trailer {
    (text
     | rem_lg
     | rem_model.gLike
     | rem_model.phrase
     | rem_model.inter
     | rem_model.lLike
     | rem_model.global)*,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_byline =
  
  ## enthält Angaben zur Autorisation eines Werks, entweder auf der Titelseite oder am Anfang oder Ende des Werks.  [4.2.2.  4.5. ]
  element byline {
    (text
     | rem_model.gLike
     | rem_model.phrase
     | rem_docAuthor
     | rem_model.global)*,
    rem_att.global.attributes,
    empty
  }
rem_dateline =
  
  ## enthält Angaben zu Entstehungsort, -datum, -zeit, usw. eines Briefs, Zeitungsartikels, oder anderen Werks, die als Überschrift oder Teil des Nachspanns dem Text voran- bzw. nachgestellt sind. [4.2.2. ]
  element dateline {
    (text
     | rem_model.gLike
     | rem_model.phrase
     | rem_model.global
     | rem_docDate)*,
    rem_att.global.attributes,
    empty
  }
rem_argument =
  
  ## Eine systematische Aufzählung oder Prosabeschreibung der Themen, die in einem Unterabschnitt des Textes behandelt werden. [4.2.  4.6. ]
  element argument {
    ((rem_model.global | rem_model.headLike)*,
     (rem_model.common, rem_model.global*)+),
    rem_att.global.attributes,
    empty
  }
rem_epigraph =
  
  ## enthält ein anonymes oder jemandem zugeschriebenes Zitat, das am Beginn eines Abschnitts, Kapitels oder auf einer Titelseite steht. [4.2.3.  4.2.  4.6. ]
  element epigraph {
    (rem_model.common | rem_model.global)*,
    rem_att.global.attributes,
    empty
  }
rem_opener =
  
  ## fasst Datumszeile, Verfasserangabe, Anredeformeln und ähnliche Angaben zusammen, die einleitend zu Beginn eines Abschnitts stehen, vor allem bei Briefen. [4.2. ]
  element opener {
    (text
     | rem_model.gLike
     | rem_model.phrase
     | rem_argument
     | rem_byline
     | rem_dateline
     | rem_epigraph
     | rem_salute
     | rem_signed
     | rem_model.global)*,
    rem_att.global.attributes,
    empty
  }
rem_closer =
  
  ## fasst Datumszeile, Verfasserangabe, Grußformeln und ähnliche Angaben zusammen, die abschließend am Ende eines Abschnitts stehen, vor allem bei Briefen. [4.2.2.  4.2. ]
  element closer {
    (text
     | rem_model.gLike
     | rem_signed
     | rem_dateline
     | rem_salute
     | rem_model.phrase
     | rem_model.global)*,
    rem_att.global.attributes,
    empty
  }
rem_salute =
  
  ## (Anrede- / Grußformel) enthält eine Anrede oder Grußformel, die einem Vorwort, einer Widmung oder einem anderen Abschnitt des Textes vorangestellt ist oder die Grußformel am Ende eines Briefes, eines Vorworts, usw. [4.2.2. ]
  element salute {
    rem_macro.paraContent, rem_att.global.attributes, empty
  }
rem_signed =
  
  ## (Signatur) enthält die abschließende Grußformel o.Ä. die ein Vorwort, eine Widmung oder einen anderen Abschnitt des Textes beendet. [4.2.2. ]
  element signed {
    rem_macro.paraContent, rem_att.global.attributes, empty
  }
rem_postscript =
  
  ## contains a postscript, e.g. to a letter. [4.2. ]
  element postscript {
    ((rem_model.global | rem_model.divTopPart)*,
     rem_model.common,
     (rem_model.global | rem_model.common)*,
     (rem_model.divBottomPart, rem_model.global*)*),
    rem_att.global.attributes,
    empty
  }
rem_titlePage =
  
  ## (Titelseite) enthält die Titelseite eines Textes, die entweder im Vorspann (front) oder Nachspann (back) steht. [4.6. ]
  element titlePage {
    (rem_model.global*,
     rem_model.titlepagePart,
     (rem_model.titlepagePart | rem_model.global)*),
    rem_att.global.attributes,
    
    ## bestimmt die Titelseite entsprechend einer geeigneten Typologie
    attribute type { rem_data.enumerated }?,
    empty
  }
rem_docTitle =
  
  ## (Dokumenttitel) enthält den Titel eines Dokuments, einschließlich aller seiner auf dem Titelblatt angegebenen Bestandteile. [4.6. ]
  element docTitle {
    (rem_model.global*, (rem_titlePart, rem_model.global*)+),
    rem_att.global.attributes,
    rem_att.canonical.attributes,
    empty
  }
rem_titlePart =
  
  ## enthält einen Untertitel oder einen Teil eines Titels, wie er auf der Titelseite angegeben ist. [4.6. ]
  element titlePart {
    rem_macro.paraContent,
    rem_att.global.attributes,
    
    ## beschreibt die Funktion dieses Titelteils näher.
    ## Empfohlene Werte sind: 1] main; 2] sub(subordinate) ; 3] alt(alternate) ; 4] short; 5] desc(descriptive) 
    [ a:defaultValue = "main" ]
    attribute type {
      
      ## main title of the work
      "main"
      | 
        ## (Untertitel des Werks) subtitle of the work
        "sub"
      | 
        ## (Alternativer Titel des Werks) alternative title of the work
        "alt"
      | 
        ## abbreviated form of title
        "short"
      | 
        ## (Kurzbeschreibung des Werks) descriptive paraphrase of the work
        "desc"
      | xsd:Name
    }?,
    empty
  }
rem_docAuthor =
  
  ## (Verfasser des Dokuments) enthält den Namen des Verfassers des Dokuments, wie auf dem Titelblatt angegeben (häufig, jedoch nicht immer mit eigener Zeile) [4.6. ]
  element docAuthor {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.canonical.attributes,
    empty
  }
rem_imprimatur =
  
  ## enthält eine formelle Erklärung zur Autorisation der Veröffentlichung, die manchmal auf der Titel- oder Rückseite erscheinen muss. [4.6. ]
  element imprimatur {
    rem_macro.paraContent, rem_att.global.attributes, empty
  }
rem_docEdition =
  
  ## (Ausgabe des Dokuments) enthält eine Erklärung zur Ausgabe, entsprechend der Angabe auf dem Titelblatt des Dokuments. [4.6. ]
  element docEdition {
    rem_macro.paraContent, rem_att.global.attributes, empty
  }
rem_docImprint =
  
  ## (Impressum des Dokuments) enthält das Impressum (Erscheinungsort und –datum, Verlag), das (üblicherweise) unten auf der Titelseite steht. [4.6. ]
  element docImprint {
    (text
     | rem_model.gLike
     | rem_model.phrase
     | rem_pubPlace
     | rem_docDate
     | rem_publisher
     | rem_model.global)*,
    rem_att.global.attributes,
    empty
  }
rem_docDate =
  
  ## (Datierung des Dokuments) enthält die Datierung des Dokuments, die (üblicherweise) auf der Titelseite vermerkt ist [4.6. ]
  element docDate {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    
    ## gives the value of the date in standard form, i.e. YYYY-MM-DD.
    attribute when { rem_data.temporal.w3c }?,
    empty
  }
rem_front =
  
  ## ( Vorspann (front)) enthält alle dem Kerntext vorangestellten Texte (Überschriften, Titelseite, Vorworte, Widmungen, usw.) zu Beginn eines Dokuments. [4.6.  4. ]
  element front {
    ((rem_model.frontPart
      | rem_model.pLike
      | rem_model.pLike.front
      | rem_model.global)*,
     (((rem_model.div1Like,
        (rem_model.div1Like | rem_model.frontPart | rem_model.global)*)
       | (rem_model.divLike,
          (rem_model.divLike
           | rem_model.frontPart
           | rem_model.global)*)),
      (rem_model.divBottom,
       (rem_model.divBottom | rem_model.global)*)?)?),
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_back =
  
  ## ( Nachspann (back)) enthält Anhänge jeglicher Art, die auf den Hauptteil eines Textes folgen [4.7.  4. ]
  element back {
    ((rem_model.frontPart
      | rem_model.pLike.front
      | rem_model.pLike
      | rem_model.listLike
      | rem_model.global)*,
     ((rem_model.div1Like,
       (rem_model.frontPart | rem_model.div1Like | rem_model.global)*)
      | (rem_model.divLike,
         (rem_model.frontPart
          | rem_model.divLike
          | rem_model.global)*))?,
     (rem_model.divBottomPart,
      (rem_model.divBottomPart | rem_model.global)*)?),
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_att.global.analytic.attributes =
  rem_att.global.analytic.attribute.ana
rem_att.global.analytic.attribute.ana =
  
  ## (analysis) indicates one or more elements containing interpretations of the element on which the ana attribute appears.
  attribute ana {
    list { rem_data.pointer+ }
  }?
rem_s =
  
  ## (s-unit) contains a sentence-like division of a text. [17.1.  8.4.1. ]
  element s {
    ((text
      | rem_model.gLike
      | rem_model.global
      | rem_binaryObject
      | rem_formula
      | rem_graphic
      | rem_media
      | rem_distinct
      | rem_emph
      | rem_foreign
      | rem_gloss
      | rem_mentioned
      | rem_soCalled
      | rem_term
      | rem_title
      | rem_hi
      | rem_address
      | rem_affiliation
      | rem_email
      | rem_date
      | rem_time
      | rem_depth
      | rem_dim
      | rem_geo
      | rem_height
      | rem_measure
      | rem_measureGrp
      | rem_num
      | rem_width
      | rem_name
      | rem_orgName
      | rem_persName
      | rem_geogFeat
      | rem_offset
      | rem_addName
      | rem_forename
      | rem_genName
      | rem_nameLink
      | rem_roleName
      | rem_surname
      | rem_bloc
      | rem_country
      | rem_district
      | rem_geogName
      | rem_placeName
      | rem_region
      | rem_settlement
      | rem_climate
      | rem_location
      | rem_population
      | rem_state
      | rem_terrain
      | rem_trait
      | rem_idno
      | rem_rs
      | rem_abbr
      | rem_am
      | rem_choice
      | rem_ex
      | rem_expan
      | rem_subst
      | rem_add
      | rem_app
      | rem_corr
      | rem_damage
      | rem_del
      | rem_handShift
      | rem_mod
      | rem_orig
      | rem_redo
      | rem_reg
      | rem_restore
      | rem_retrace
      | rem_sic
      | rem_supplied
      | rem_surplus
      | rem_unclear
      | rem_undo
      | rem_catchwords
      | rem_dimensions
      | rem_heraldry
      | rem_locus
      | rem_locusGrp
      | rem_material
      | rem_objectType
      | rem_origDate
      | rem_origPlace
      | rem_secFol
      | rem_signatures
      | rem_stamp
      | rem_watermark
      | rem_ptr
      | rem_ref
      | rem_c
      | rem_cl
      | rem_m
      | rem_pc
      | rem_phr
      | rem_seg
      | rem_w)*)
    >> sch:pattern [
         id = "rem-basel-s-noNestedS-constraint-5"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:s"
           "\x{a}" ~
           "               "
           sch:report [
             test = "tei:s"
             "You may not nest one s element within\x{a}" ~
             "      another: use seg instead"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.segLike.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_cl =
  
  ## (clause) represents a grammatical clause. [17.1. ]
  element cl {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.segLike.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_phr =
  
  ## (phrase) represents a grammatical phrase. [17.1. ]
  element phr {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.segLike.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_w =
  
  ## (word) represents a grammatical (not necessarily orthographic) word. [17.1. ]
  element w {
    (text
     | rem_model.gLike
     | rem_seg
     | rem_w
     | rem_m
     | rem_c
     | rem_pc
     | rem_model.global
     | rem_model.lPart
     | rem_model.hiLike
     | rem_model.pPart.edit)*,
    rem_att.global.attributes,
    rem_att.segLike.attributes,
    rem_att.typed.attributes,
    
    ## provides a lemma for the word, such as an uninflected dictionary entry form.
    attribute lemma { rem_data.text }?,
    
    ## provides a pointer to a definition of the lemma for the word, for example in an online lexicon.
    attribute lemmaRef { rem_data.pointer }?,
    empty
  }
rem_m =
  
  ## (morpheme) represents a grammatical morpheme. [17.1. ]
  element m {
    (text
     | rem_model.gLike
     | rem_seg
     | rem_m
     | rem_c
     | rem_model.global)*,
    rem_att.global.attributes,
    rem_att.segLike.attributes,
    rem_att.typed.attributes,
    
    ## supplies the morpheme's base form.
    attribute baseForm { rem_data.word }?,
    empty
  }
rem_c =
  
  ## (character) represents a character. [17.1. ]
  element c {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.segLike.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_pc =
  
  ## (punctuation character) contains a character or string of characters regarded as constituting a single punctuation mark. [17.1. ]
  element pc {
    (text | rem_model.gLike | rem_c | rem_model.pPart.edit)*,
    rem_att.global.attributes,
    rem_att.segLike.attributes,
    rem_att.typed.attributes,
    
    ## indicates the extent to which this punctuation mark conventionally separates words or phrases
    attribute force {
      
      ## the punctuation mark is a word separator
      "strong"
      | 
        ## the punctuation mark is not a word separator
        "weak"
      | 
        ## the punctuation mark may or may not be a word separator
        "inter"
    }?,
    
    ## provides a name for the kind of unit delimited by this punctuation mark.
    attribute unit { rem_data.enumerated }?,
    
    ## indicates whether this punctuation mark precedes or follows the unit it delimits.
    attribute pre { rem_data.truthValue }?,
    empty
  }
rem_span =
  
  ## associates an interpretative annotation directly with a span of text. [17.3. ]
  element span {
    rem_macro.phraseSeq.limited
    >> sch:pattern [
         id = "rem-basel-span-targetfrom-constraint-6"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:span"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@from and @target"
             "\x{a}" ~
             "Only one of the attributes @target and @from may be supplied on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "rem-basel-span-targetto-constraint-7"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:span"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@to and @target"
             "\x{a}" ~
             "Only one of the attributes @target and @to may be supplied on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "rem-basel-span-tonotfrom-constraint-8"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:span"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@to and not(@from)"
             "\x{a}" ~
             "If @to is supplied on "
             sch:name [ ]
             ", @from must be supplied as well"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "rem-basel-span-tofrom-constraint-9"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:span"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "contains(normalize-space(@to),' ') or contains(normalize-space(@from),' ')"
             "\x{a}" ~
             "The attributes @to and @from on "
             sch:name [ ]
             " may each contain only a single value"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.interpLike.attributes,
    rem_att.pointing.attributes,
    
    ## gives the identifier of the node which is the starting point of the span of text being annotated; if not accompanied by a to attribute, gives the identifier of the node of the entire span of text being annotated.
    attribute from { rem_data.pointer }?,
    
    ## gives the identifier of the node which is the end-point of the span of text being annotated.
    attribute to { rem_data.pointer }?,
    empty
  }
rem_spanGrp =
  
  ## (span group) collects together span tags. [17.3. ]
  element spanGrp {
    rem_span*,
    rem_att.global.attributes,
    rem_att.interpLike.attributes,
    empty
  }
rem_interp =
  
  ## (interpretation) summarizes a specific interpretative annotation which can be linked to a span of text. [17.3. ]
  element interp {
    (text | rem_model.gLike | rem_model.descLike | rem_model.certLike)*,
    rem_att.global.attributes,
    rem_att.interpLike.attributes,
    empty
  }
rem_interpGrp =
  
  ## (interpretation group) collects together a set of related interpretations which share responsibility or type. [17.3. ]
  element interpGrp {
    (rem_model.descLike*, rem_interp+),
    rem_att.global.attributes,
    rem_att.interpLike.attributes,
    empty
  }
rem_precision =
  
  ## indicates the numerical accuracy or precision associated with some aspect of the text markup. [21.2. ]
  element precision {
    (rem_model.descLike | rem_model.certLike)*,
    rem_att.global.attributes,
    rem_att.scoping.attributes,
    rem_att.ranging.attributes,
    
    ## indicates the degree of precision to be assigned as a value between 0 (none) and 1 (optimally precise)
    attribute degree { rem_data.probability }?,
    
    ## characterizes the precision of the element or attribute pointed to by the precision element.
    attribute precision { rem_data.certainty }?,
    
    ## supplies a standard deviation associated with the value in question
    attribute stdDeviation { rem_data.numeric }?,
    empty
  }
rem_certainty =
  
  ## indicates the degree of certainty associated with some aspect of the text markup. [21.1.2. ]
  element certainty {
    (rem_model.descLike | rem_model.certLike)*,
    rem_att.global.attributes,
    rem_att.scoping.attributes,
    
    ## (certainty) signifies the degree of certainty associated with the object pointed to by the certainty element.
    attribute cert { rem_data.certainty }?,
    
    ## indicates more exactly the aspect concerning which certainty is being expressed: specifically, whether the markup is correctly located, whether the correct element or attribute name has been used, or whether the content of the element or attribute is correct, etc.
    attribute locus {
      
      ## uncertainty concerns whether the name of the element or attribute used is correctly applied.
      "name"
      | 
        ## uncertainty concerns whether the start of the element is correctly identified.
        "start"
      | 
        ## uncertainty concerns whether the end of the element is correctly identified.
        "end"
      | 
        ## uncertainty concerns both the start and the end of the element.
        "location"
      | 
        ## uncertainty concerns the content (for an element) or the value (for an attribute)
        "value"
    },
    
    ## provides an alternative value for the aspect of the markup in question—an alternative generic identifier, transcription, or attribute value, or the identifier of an anchor element (to indicate an alternative starting or ending location). If an assertedValue is given, the confidence level specified by degree applies to the alternative markup specified by assertedValue; if none is given, it applies to the markup in the text.
    attribute assertedValue {
      rem_data.pointer | rem_data.name | rem_data.word
    }?,
    
    ## indicates one or more element(s) characterizing the conditions which are assumed in the assignment of a degree of confidenceconditions assumed in the assignment of a degree of confidence.
    attribute given {
      list { rem_data.pointer+ }
    }?,
    
    ## indicates the degree of confidence assigned to the aspect of the markup named by the locus attribute.
    attribute degree { rem_data.probability }?,
    empty
  }
rem_respons =
  
  ## (responsibility) identifies the individual(s) responsible for some aspect of the content or markup of particular element(s). [21.3. ]
  element respons {
    (rem_model.descLike | rem_model.certLike)*,
    rem_att.global.attributes,
    rem_att.scoping.attributes,
    rem_att.responsibility.attributes,
    
    ## indicates the specific aspect of the encoding (markup or content) for which responsibility is being assigned.
    attribute locus {
      list {
        (
         ## responsibility is being assigned concerning the name of the element or attribute used.
         "name"
         | 
           ## responsibility is being assigned concerning the start of the element concerned.
           "start"
         | 
           ## responsibility is being assigned concerning the end of the element concerned.
           "end"
         | 
           ## responsibility is being assigned concerning the location of the element concerned.
           "location"
         | 
           ## responsibility is being assigned concerning the content (for an element) or the value (for an attribute)
           "value")+
      }
    },
    empty
  }
rem_table =
  
  ## contains text displayed in tabular form, in rows and columns. [14.1.1. ]
  element table {
    ((rem_model.headLike | rem_model.global)*,
     ((rem_row, rem_model.global*)+
      | (rem_model.graphicLike, rem_model.global*)+),
     (rem_model.divBottom, rem_model.global*)*),
    rem_att.global.attributes,
    
    ## indicates the number of rows in the table.
    attribute rows { rem_data.count }?,
    
    ## (columns) indicates the number of columns in each row of the table.
    attribute cols { rem_data.count }?,
    empty
  }
rem_row =
  
  ## contains one row of a table. [14.1.1. ]
  element row {
    rem_cell+,
    rem_att.global.attributes,
    rem_att.tableDecoration.attributes,
    empty
  }
rem_cell =
  
  ## contains one cell of a table. [14.1.1. ]
  element cell {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.tableDecoration.attributes,
    empty
  }
rem_formula =
  
  ## contains a mathematical or other formula. [14.2. ]
  element formula {
    (text | rem_model.graphicLike | rem_model.hiLike)*,
    rem_att.global.attributes,
    
    ## names the notation used for the content of the element.
    attribute notation { rem_data.enumerated }?,
    empty
  }
rem_notatedMusic =
  
  ## encodes the presence of music notation in a text [14.3. ]
  element notatedMusic {
    (rem_model.labelLike
     | rem_model.ptrLike
     | rem_graphic
     | rem_binaryObject)*,
    rem_att.global.attributes,
    rem_att.placement.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_figure =
  
  ## groups elements representing or containing graphic information such as an illustration, formula, or figure. [14.4. ]
  element figure {
    (rem_model.headLike
     | rem_model.common
     | rem_figDesc
     | rem_model.graphicLike
     | rem_model.global
     | rem_model.divBottom)*,
    rem_att.global.attributes,
    rem_att.placement.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_figDesc =
  
  ## (description of figure) contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it. [14.4. ]
  element figDesc {
    rem_macro.limitedContent, rem_att.global.attributes, empty
  }
rem_g =
  
  ## (character or glyph) represents a glyph, or a non-standard character. [5. ]
  element g {
    text,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    
    ## points to a description of the character or glyph intended.
    attribute ref { rem_data.pointer }?,
    empty
  }
rem_char =
  
  ## (character) provides descriptive information about a character. [5.2. ]
  element char {
    (rem_charName?,
     rem_model.descLike*,
     rem_charProp*,
     rem_mapping*,
     rem_figure*,
     rem_model.graphicLike*,
     rem_model.noteLike*),
    rem_att.global.attributes,
    empty
  }
rem_charName =
  
  ## (character name) contains the name of a character, expressed following Unicode conventions. [5.2. ]
  element charName { text, rem_att.global.attributes, empty }
rem_charProp =
  
  ## (character property) provides a name and value for some property of the parent character or glyph. [5.2. ]
  element charProp {
    ((rem_unicodeName | rem_localName), rem_value),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_charDecl =
  
  ## (character declarations) provides information about nonstandard characters and glyphs. [5.2. ]
  element charDecl {
    (rem_desc?, (rem_char | rem_glyph)+),
    rem_att.global.attributes,
    empty
  }
rem_glyph =
  
  ## (character glyph) provides descriptive information about a character glyph. [5.2. ]
  element glyph {
    (rem_glyphName?,
     rem_model.descLike*,
     rem_charProp*,
     rem_mapping*,
     rem_figure*,
     rem_model.graphicLike*,
     rem_model.noteLike*),
    rem_att.global.attributes,
    empty
  }
rem_glyphName =
  
  ## (character glyph name) contains the name of a glyph, expressed following Unicode conventions for character names. [5.2. ]
  element glyphName { text, rem_att.global.attributes, empty }
rem_localName =
  
  ## (locally-defined property name) contains a locally defined name for some property. [5.2.1. ]
  element localName { text, rem_att.global.attributes, empty }
rem_mapping =
  
  ## (character mapping) contains one or more characters which are related to the parent character or glyph in some respect, as specified by the type attribute. [5.2. ]
  element mapping {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_unicodeName =
  
  ## (unicode property name) contains the name of a registered Unicode normative or informative property. [5.2.1. ]
  element unicodeName {
    text,
    rem_att.global.attributes,
    
    ## specifies the version number of the Unicode Standard in which this property name is defined.
    attribute version { rem_data.version }?,
    empty
  }
rem_value =
  
  ## contains a single value for some property, attribute, or other analysis. [5.2.1. ]
  element value { rem_macro.xtext, rem_att.global.attributes, empty }
rem_att.global.linking.attributes =
  rem_att.global.linking.attribute.corresp,
  rem_att.global.linking.attribute.synch,
  rem_att.global.linking.attribute.sameAs,
  rem_att.global.linking.attribute.copyOf,
  rem_att.global.linking.attribute.next,
  rem_att.global.linking.attribute.prev,
  rem_att.global.linking.attribute.exclude,
  rem_att.global.linking.attribute.select
rem_att.global.linking.attribute.corresp =
  
  ## (corresponds) points to elements that correspond to the current element in some way.
  attribute corresp {
    list { rem_data.pointer+ }
  }?
rem_att.global.linking.attribute.synch =
  
  ## (synchronous) points to elements that are synchronous with the current element.
  attribute synch {
    list { rem_data.pointer+ }
  }?
rem_att.global.linking.attribute.sameAs =
  
  ## points to an element that is the same as the current element.
  attribute sameAs { rem_data.pointer }?
rem_att.global.linking.attribute.copyOf =
  
  ## points to an element of which the current element is a copy.
  attribute copyOf { rem_data.pointer }?
rem_att.global.linking.attribute.next =
  
  ## points to the next element of a virtual aggregate of which the current element is part.
  attribute next { rem_data.pointer }?
rem_att.global.linking.attribute.prev =
  
  ## (previous) points to the previous element of a virtual aggregate of which the current element is part.
  attribute prev { rem_data.pointer }?
rem_att.global.linking.attribute.exclude =
  
  ## points to elements that are in exclusive alternation with the current element.
  attribute exclude {
    list { rem_data.pointer+ }
  }?
rem_att.global.linking.attribute.select =
  
  ## selects one or more alternants; if one alternant is selected, the ambiguity or uncertainty is marked as resolved. If more than one alternant is selected, the degree of ambiguity or uncertainty is marked as reduced by the number of alternants not selected.
  attribute select {
    list { rem_data.pointer+ }
  }?
rem_link =
  
  ## defines an association or hypertextual link among elements or passages, of some type not more precisely specifiable by other elements. [16.1. ]
  element link {
    empty
    >> sch:pattern [
         id = "rem-basel-link-linkTargets3-constraint-8"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:link"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "contains(normalize-space(@target),' ')"
             "You must supply at least two values for @target or  on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.pointing.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_linkGrp =
  
  ## (link group) defines a collection of associations or hypertextual links. [16.1. ]
  element linkGrp {
    (rem_link | rem_ptr)+,
    rem_att.global.attributes,
    rem_att.pointing.group.attributes,
    empty
  }
rem_ab =
  
  ## (anonymous block) contains any arbitrary component-level unit of text, acting as an anonymous container for phrase or inter level elements analogous to, but without the semantic baggage of, a paragraph. [16.3. ]
  element ab {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    rem_att.fragmentable.attributes,
    empty
  }
rem_anchor =
  
  ## (anchor point) attaches an identifier to a point within a text, whether or not it corresponds with a textual element. [8.4.2.  16.4. ]
  element anchor {
    empty, rem_att.global.attributes, rem_att.typed.attributes, empty
  }
rem_seg =
  
  ## (arbitrary segment) represents any segmentation of text below the chunk level. [16.3.  6.2.  7.2.5. ]
  element seg {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.segLike.attributes,
    rem_att.typed.attributes,
    rem_att.responsibility.attributes,
    empty
  }
rem_when =
  
  ## indicates a point in time either relative to other elements in the same timeline tag, or absolutely. [16.5.2. ]
  element when {
    empty,
    rem_att.global.attributes,
    
    ## supplies an absolute value for the time.
    attribute absolute { rem_data.temporal.w3c }?,
    
    ## specifies the unit of time in which the interval value is expressed, if this is not inherited from the parent timeline.
    ## Empfohlene Werte sind: 1] d(days) ; 2] h(hours) ; 3] min(minutes) ; 4] s(seconds) ; 5] ms(milliseconds) 
    attribute unit {
      
      ## (days) 
      "d"
      | 
        ## (hours) 
        "h"
      | 
        ## (minutes) 
        "min"
      | 
        ## (seconds) 
        "s"
      | 
        ## (milliseconds) 
        "ms"
      | xsd:Name
    }?,
    
    ## specifies a time interval either as a number or as one of the keywords defined by the datatype data.interval
    attribute interval { rem_data.interval }?,
    
    ## identifies the reference point for determining the time of the current when element, which is obtained by adding the interval to the time of the reference point.
    attribute since { rem_data.pointer }?,
    empty
  }
rem_timeline =
  
  ## provides a set of ordered points in time which can be linked to elements of a spoken text to create a temporal alignment of that text. [16.5.2. ]
  element timeline {
    rem_when+,
    rem_att.global.attributes,
    
    ## designates the origin of the timeline, i.e. the time at which it begins.
    attribute origin { rem_data.pointer }?,
    
    ## specifies the unit of time corresponding to the interval value of the timeline or of its constituent points in time.
    ## Empfohlene Werte sind: 1] d(days) ; 2] h(hours) ; 3] min(minutes) ; 4] s(seconds) ; 5] ms(milliseconds) 
    attribute unit {
      
      ## (days) 
      "d"
      | 
        ## (hours) 
        "h"
      | 
        ## (minutes) 
        "min"
      | 
        ## (seconds) 
        "s"
      | 
        ## (milliseconds) 
        "ms"
      | xsd:Name
    }?,
    
    ## specifies a time interval either as a positive integral value or using one of a set of predefined codes.
    attribute interval { rem_data.interval }?,
    empty
  }
rem_join =
  
  ## identifies a possibly fragmented segment of text, by pointing at the possibly discontiguous elements which compose it. [16.7. ]
  element join {
    ((rem_model.descLike | rem_model.certLike)*)
    >> sch:pattern [
         id = "rem-basel-join-joinTargets3-constraint-9"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:join"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "contains(@target,' ')"
             "\x{a}" ~
             "You must supply at least two values for @target on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.pointing.attributes,
    rem_att.typed.attributes,
    
    ## specifies the name of an element which this aggregation may be understood to represent.
    attribute result { rem_data.name }?,
    
    ## indicates whether the targets to be joined include the entire element indicated (the entire subtree including its root), or just the children of the target (the branches of the subtree).
    [ a:defaultValue = "root" ]
    attribute scope {
      
      ## the rooted subtrees indicated by the target attribute are joined, each subtree become a child of the virtual element created by the join
      "root"
      | 
        ## the children of the subtrees indicated by the target attribute become the children of the virtual element (i.e. the roots of the subtrees are discarded)
        "branches"
    }?,
    empty
  }
rem_joinGrp =
  
  ## (join group) groups a collection of join elements and possibly pointers. [16.7. ]
  element joinGrp {
    (rem_model.glossLike*, (rem_join | rem_ptr)+),
    rem_att.global.attributes,
    rem_att.pointing.group.attributes,
    
    ## supplies the default value for the result on each join included within the group.
    attribute result { rem_data.name }?,
    empty
  }
rem_alt =
  
  ## (alternation) identifies an alternation or a set of choices among elements or passages. [16.8. ]
  element alt {
    empty,
    rem_att.global.attributes,
    rem_att.pointing.attribute.targetLang,
    rem_att.pointing.attribute.evaluate,
    rem_att.typed.attributes,
    
    ## specifies the destination of the reference by supplying one or more URI References
    attribute target {
      list { rem_data.pointer, rem_data.pointer, rem_data.pointer* }
    }?,
    
    ## states whether the alternations gathered in this collection are exclusive or inclusive.
    attribute mode {
      
      ## (exclusive) indicates that the alternation is exclusive, i.e. that at most one of the alternatives occurs.
      "excl"
      | 
        ## (inclusive) indicates that the alternation is not exclusive, i.e. that one or more of the alternatives occur.
        "incl"
    }?,
    
    ## If mode is , each weight states the probability that the corresponding alternative occurs. If mode is incl each weight states the probability that the corresponding alternative occurs given that at least one of the other alternatives occurs.
    attribute weights {
      list {
        rem_data.probability,
        rem_data.probability,
        rem_data.probability*
      }
    }?,
    empty
  }
rem_altGrp =
  
  ## (alternation group) groups a collection of alt elements and possibly pointers. [16.8. ]
  element altGrp {
    (rem_alt | rem_ptr)*,
    rem_att.global.attributes,
    rem_att.pointing.group.attributes,
    
    ## states whether the alternations gathered in this collection are exclusive or inclusive.
    [ a:defaultValue = "excl" ]
    attribute mode {
      
      ## (exclusive) indicates that the alternation is exclusive, i.e. that at most one of the alternatives occurs.
      "excl"
      | 
        ## (inclusive) indicates that the alternation is not exclusive, i.e. that one or more of the alternatives occur.
        "incl"
    }?,
    empty
  }
rem_att.datable.custom.attributes =
  rem_att.datable.custom.attribute.when-custom,
  rem_att.datable.custom.attribute.notBefore-custom,
  rem_att.datable.custom.attribute.notAfter-custom,
  rem_att.datable.custom.attribute.from-custom,
  rem_att.datable.custom.attribute.to-custom,
  rem_att.datable.custom.attribute.datingPoint,
  rem_att.datable.custom.attribute.datingMethod
rem_att.datable.custom.attribute.when-custom =
  
  ## supplies the value of a date or time in some standard form.
  attribute when-custom {
    list { rem_data.word+ }
  }?
rem_att.datable.custom.attribute.notBefore-custom =
  
  ## specifies the earliest possible date for the event in some custom standard form.
  attribute notBefore-custom {
    list { rem_data.word+ }
  }?
rem_att.datable.custom.attribute.notAfter-custom =
  
  ## specifies the latest possible date for the event in some custom standard form.
  attribute notAfter-custom {
    list { rem_data.word+ }
  }?
rem_att.datable.custom.attribute.from-custom =
  
  ## indicates the starting point of the period in some standard form.
  attribute from-custom {
    list { rem_data.word+ }
  }?
rem_att.datable.custom.attribute.to-custom =
  
  ## indicates the ending point of the period in some standard form.
  attribute to-custom {
    list { rem_data.word+ }
  }?
rem_att.datable.custom.attribute.datingPoint =
  
  ## supplies a pointer to some location defining a named point in time with reference to which the datable item is understood to have occurred
  attribute datingPoint { rem_data.pointer }?
rem_att.datable.custom.attribute.datingMethod =
  
  ## supplies a pointer to a calendar element or other means of interpreting the values of the custom dating attributes.
  attribute datingMethod { rem_data.pointer }?
rem_model.persNamePart =
  rem_surname
  | rem_forename
  | rem_genName
  | rem_nameLink
  | rem_addName
  | rem_roleName
rem_model.persNamePart_alternation =
  rem_surname
  | rem_forename
  | rem_genName
  | rem_nameLink
  | rem_addName
  | rem_roleName
rem_model.persNamePart_sequence =
  rem_surname,
  rem_forename,
  rem_genName,
  rem_nameLink,
  rem_addName,
  rem_roleName
rem_model.persNamePart_sequenceOptional =
  rem_surname?,
  rem_forename?,
  rem_genName?,
  rem_nameLink?,
  rem_addName?,
  rem_roleName?
rem_model.persNamePart_sequenceOptionalRepeatable =
  rem_surname*,
  rem_forename*,
  rem_genName*,
  rem_nameLink*,
  rem_addName*,
  rem_roleName*
rem_model.persNamePart_sequenceRepeatable =
  rem_surname+,
  rem_forename+,
  rem_genName+,
  rem_nameLink+,
  rem_addName+,
  rem_roleName+
rem_att.datable.iso.attributes =
  rem_att.datable.iso.attribute.when-iso,
  rem_att.datable.iso.attribute.notBefore-iso,
  rem_att.datable.iso.attribute.notAfter-iso,
  rem_att.datable.iso.attribute.from-iso,
  rem_att.datable.iso.attribute.to-iso
rem_att.datable.iso.attribute.when-iso =
  
  ## supplies the value of a date or time in a standard form.
  attribute when-iso { rem_data.temporal.iso }?
rem_att.datable.iso.attribute.notBefore-iso =
  
  ## specifies the earliest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notBefore-iso { rem_data.temporal.iso }?
rem_att.datable.iso.attribute.notAfter-iso =
  
  ## specifies the latest possible date for the event in standard form, e.g. yyyy-mm-dd.
  attribute notAfter-iso { rem_data.temporal.iso }?
rem_att.datable.iso.attribute.from-iso =
  
  ## indicates the starting point of the period in standard form.
  attribute from-iso { rem_data.temporal.iso }?
rem_att.datable.iso.attribute.to-iso =
  
  ## indicates the ending point of the period in standard form.
  attribute to-iso { rem_data.temporal.iso }?
rem_orgName =
  
  ## (organization name) contains an organizational name. [13.2.2. ]
  element orgName {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.personal.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_persName =
  
  ## (personal name) contains a proper noun or proper-noun phrase referring to a person, possibly including one or more of the person's forenames, surnames, honorifics, added names, etc. [13.2.1. ]
  element persName {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.personal.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_surname =
  
  ## contains a family (inherited) name, as opposed to a given, baptismal, or nick name. [13.2.1. ]
  element surname {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.personal.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_forename =
  
  ## contains a forename, given or baptismal name. [13.2.1. ]
  element forename {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.personal.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_genName =
  
  ## (generational name component) contains a name component used to distinguish otherwise similar names on the basis of the relative ages or generations of the persons named. [13.2.1. ]
  element genName {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.personal.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_nameLink =
  
  ## (name link) contains a connecting phrase or link used within a name but not regarded as part of it, such as van der or of. [13.2.1. ]
  element nameLink {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_addName =
  
  ## (additional name) contains an additional name component, such as a nickname, epithet, or alias, or any other descriptive phrase used within a personal name. [13.2.1. ]
  element addName {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.personal.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_roleName =
  
  ## contains a name component which indicates that the referent has a particular role or position in society, such as an official title or rank. [13.2.1. ]
  element roleName {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.personal.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_placeName =
  
  ## contains an absolute or relative place name. [13.2.3. ]
  element placeName {
    rem_macro.phraseSeq,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.global.attributes,
    rem_att.personal.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_bloc =
  
  ## contains the name of a geo-political unit consisting of two or more nation states or countries. [13.2.3. ]
  element bloc {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    rem_att.datable.attributes,
    empty
  }
rem_country =
  
  ## contains the name of a geo-political unit, such as a nation, country, colony, or commonwealth, larger than or administratively superior to a region and smaller than a bloc. [13.2.3. ]
  element country {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    rem_att.datable.attributes,
    empty
  }
rem_region =
  
  ## contains the name of an administrative unit such as a state, province, or county, larger than a settlement, but smaller than a country. [13.2.3. ]
  element region {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    rem_att.datable.attributes,
    empty
  }
rem_district =
  
  ## contains the name of any kind of subdivision of a settlement, such as a parish, ward, or other administrative or geographic unit. [13.2.3. ]
  element district {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    rem_att.datable.attributes,
    empty
  }
rem_settlement =
  
  ## contains the name of a settlement such as a city, town, or village identified as a single geo-political or administrative unit. [13.2.3. ]
  element settlement {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    rem_att.datable.attributes,
    empty
  }
rem_offset =
  
  ## marks that part of a relative temporal or spatial expression which indicates the direction of the offset between the two place names, dates, or times involved in the expression. [13.2.3. ]
  element offset {
    rem_macro.phraseSeq,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_geogName =
  
  ## (geographical name) identifies a name associated with some geographical feature such as Windrush Valley or Mount Sinai. [13.2.3. ]
  element geogName {
    rem_macro.phraseSeq,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_geogFeat =
  
  ## (geographical feature name) contains a common noun identifying some geographical feature contained within a geographic name, such as valley, mount, etc. [13.2.3. ]
  element geogFeat {
    rem_macro.phraseSeq,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_affiliation =
  
  ## contains an informal description of a person's present or past affiliation with some organization, for example an employer or sponsor. [15.2.2. ]
  element affiliation {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    rem_att.datable.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_age =
  
  ## specifies the age of a person. [13.3.2.1. ]
  element age {
    rem_macro.phraseSeq.limited,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    rem_att.datable.attributes,
    
    ## supplies a numeric code representing the age or age group
    attribute value { rem_data.count }?,
    empty
  }
rem_birth =
  
  ## contains information about a person's birth, such as its date and place. [15.2.2. ]
  element birth {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    rem_att.datable.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_climate =
  
  ## contains information about the physical climate of a place. [13.3.4.3. ]
  element climate {
    (rem_model.headLike*,
     (rem_model.pLike+ | rem_model.labelLike+),
     (rem_model.noteLike | rem_model.biblLike)*,
     rem_climate*),
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_death =
  
  ## contains information about a person's death, such as its date and place. [15.2.2. ]
  element death {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    rem_att.datable.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_education =
  
  ## contains a description of the educational experience of a person. [15.2.2. ]
  element education {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    rem_att.datable.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_event =
  
  ## contains data relating to any kind of significant event associated with a person, place, or organization. [13.3.1. ]
  element event {
    (rem_model.headLike*,
     (rem_model.pLike+ | rem_model.labelLike+),
     (rem_model.noteLike
      | rem_model.biblLike
      | rem_linkGrp
      | rem_link)*,
     rem_event*),
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.typed.attributes,
    rem_att.naming.attributes,
    rem_att.sortable.attributes,
    
    ## indicates the location of an event by pointing to a place element
    attribute where { rem_data.pointer }?,
    empty
  }
rem_faith =
  
  ## specifies the faith, religion, or belief set of a person. [13.3.2.1. ]
  element faith {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    rem_att.datable.attributes,
    rem_att.canonical.attributes,
    empty
  }
rem_floruit =
  
  ## contains information about a person's period of activity. [13.3.2.1. ]
  element floruit {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    empty
  }
rem_geo =
  
  ## (geographical coordinates) contains any expression of a set of geographic coordinates, representing a point, line, or area on the surface of the earth in some notation. [13.3.4.1. ]
  element geo {
    text, rem_att.global.attributes, rem_att.declaring.attributes, empty
  }
rem_langKnowledge =
  
  ## (language knowledge) summarizes the state of a person's linguistic knowledge, either as prose or by a list of langKnown elements. [13.3.2.1. ]
  element langKnowledge {
    (rem_model.pLike | rem_langKnown+),
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    
    ## supplies one or more valid language tags for the languages specified
    attribute tags {
      list { rem_data.language+ }
    }?,
    empty
  }
rem_langKnown =
  
  ## (language known) summarizes the state of a person's linguistic competence, i.e., knowledge of a single language. [15.2.2. ]
  element langKnown {
    rem_macro.phraseSeq.limited,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    
    ## supplies a valid language tag for the language concerned.
    attribute tag { rem_data.language },
    
    ## a code indicating the person's level of knowledge for this language
    attribute level { rem_data.word }?,
    empty
  }
rem_listOrg =
  
  ## (list of organizations) contains a list of elements, each of which provides information about an identifiable organization. [13.2.2. ]
  element listOrg {
    (rem_model.headLike*,
     (rem_org | rem_listOrg)+,
     (rem_relation | rem_listRelation)*),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.declarable.attributes,
    rem_att.sortable.attributes,
    empty
  }
rem_listEvent =
  
  ## (list of events) contains a list of descriptions, each of which provides information about an identifiable event. [13.3.1. ]
  element listEvent {
    (rem_model.headLike*,
     (rem_event | rem_listEvent)+,
     (rem_relation | rem_listRelation)*),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.declarable.attributes,
    rem_att.sortable.attributes,
    empty
  }
rem_listPerson =
  
  ## (list of persons) contains a list of descriptions, each of which provides information about an identifiable person or a group of people, for example the participants in a language interaction, or the people referred to in a historical source. [13.3.2.  15.2.  2.4.  15.3.2. ]
  element listPerson {
    (rem_model.headLike*,
     (rem_model.personLike | rem_listPerson)+,
     (rem_relation | rem_listRelation)*),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.declarable.attributes,
    rem_att.sortable.attributes,
    empty
  }
rem_listPlace =
  
  ## (list of places) contains a list of places, optionally followed by a list of relationships (other than containment) defined amongst them. [2.2.7.  13.3.4. ]
  element listPlace {
    (rem_model.headLike*,
     (rem_model.placeLike | rem_listPlace)+,
     (rem_relation | rem_listRelation)*),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.declarable.attributes,
    rem_att.sortable.attributes,
    empty
  }
rem_location =
  
  ## defines the location of a place as a set of geographical coordinates, in terms of other named geo-political entities, or as an address. [13.3.4. ]
  element location {
    (rem_model.labelLike
     | rem_model.placeNamePart
     | rem_model.offsetLike
     | rem_model.measureLike
     | rem_model.addressLike
     | rem_model.noteLike
     | rem_model.biblLike)*,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    empty
  }
rem_nationality =
  
  ## contains an informal description of a person's present or past nationality or citizenship. [15.2.2. ]
  element nationality {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_occupation =
  
  ## contains an informal description of a person's trade, profession or occupation. [15.2.2. ]
  element occupation {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.naming.attributes,
    
    ## indicates the classification system or taxonomy in use, for example by supplying the identifier of a taxonomy element, or pointing to some other resource.
    attribute scheme { rem_data.pointer }?,
    
    ## identifies an occupation code defined within the classification system or taxonomy defined by the scheme attribute.
    attribute code { rem_data.pointer }?,
    empty
  }
rem_org =
  
  ## (organization) provides information about an identifiable organization such as a business, a tribe, or any other grouping of people. [13.2.2. ]
  element org {
    (rem_model.headLike*,
     (rem_model.pLike*
      | (rem_model.labelLike
         | rem_model.nameLike
         | rem_model.placeLike
         | rem_model.orgPart)*),
     (rem_model.noteLike
      | rem_model.biblLike
      | rem_linkGrp
      | rem_link)*,
     rem_model.personLike*),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.editLike.attributes,
    rem_att.sortable.attributes,
    
    ## specifies a primary role or classification for the organization.
    attribute role {
      list { rem_data.word+ }
    }?,
    empty
  }
rem_listRelation =
  
  ## provides information about relationships identified amongst people, places, and organizations, either informally as prose or as formally expressed relation links. [13.3.2.3. ]
  element listRelation {
    (rem_model.headLike*,
     (rem_model.pLike | (rem_relation | rem_listRelation)+)),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.sortable.attributes,
    empty
  }
rem_person =
  
  ## provides information about an identifiable individual, for example a participant in a language interaction, or a person referred to in a historical source. [13.3.2.  15.2.2. ]
  element person {
    (rem_model.pLike+ | (rem_model.personPart | rem_model.global)*),
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    rem_att.sortable.attributes,
    
    ## specifies a primary role or classification for the person.
    attribute role {
      list { rem_data.enumerated+ }
    }?,
    
    ## specifies the sex of the person.
    attribute sex {
      list { rem_data.sex+ }
    }?,
    
    ## specifies an age group for the person.
    attribute age { rem_data.enumerated }?,
    empty
  }
rem_personGrp =
  
  ## (personal group) describes a group of individuals treated as a single person for analytic purposes. [15.2.2. ]
  element personGrp {
    (rem_model.pLike+ | (rem_model.personPart | rem_model.global)*),
    rem_att.global.attributes,
    rem_att.sortable.attributes,
    
    ## specifies the role of this group of participants in the interaction.
    attribute role { rem_data.enumerated }?,
    
    ## specifies the sex of the participant group.
    attribute sex {
      list { rem_data.sex+ }
    }?,
    
    ## specifies the age group of the participants.
    attribute age { rem_data.enumerated }?,
    
    ## describes informally the size or approximate size of the group for example by means of a number and an indication of accuracy e.g. approx 200.
    attribute size {
      list { rem_data.word+ }
    }?,
    empty
  }
rem_place =
  
  ## contains data about a geographic location [13.3.4. ]
  element place {
    (rem_model.headLike*,
     (rem_model.pLike*
      | (rem_model.labelLike
         | rem_model.placeStateLike
         | rem_model.placeEventLike)*),
     (rem_model.noteLike
      | rem_model.biblLike
      | rem_idno
      | rem_linkGrp
      | rem_link)*,
     (rem_model.placeLike | rem_listPlace)*),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.editLike.attributes,
    rem_att.sortable.attributes,
    empty
  }
rem_population =
  
  ## contains information about the population of a place. [13.3.4.3. ]
  element population {
    (rem_model.headLike*,
     ((rem_model.pLike+ | rem_model.labelLike+),
      (rem_model.noteLike | rem_model.biblLike)*)?,
     rem_population*),
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_relation =
  
  ## (relationship) describes any kind of relationship or linkage amongst a specified group of places, events, persons, objects or other items. [13.3.2.3. ]
  element relation {
    (rem_desc?)
    >> sch:pattern [
         id = "rem-basel-relation-reforkeyorname-constraint-10"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@ref or @key or @name"
             "One of the attributes  'name', 'ref' or 'key' must be supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "rem-basel-relation-activemutual-constraint-10"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@active and @mutual"
             "Only one of the attributes\x{a}" ~
             "@active and @mutual may be supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "rem-basel-relation-activepassive-constraint-11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:relation"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@passive and not(@active)"
             "the attribute 'passive'\x{a}" ~
             "	may be supplied only if the attribute 'active' is\x{a}" ~
             "	supplied"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.canonical.attributes,
    rem_att.sortable.attributes,
    rem_att.typed.attributes,
    
    ## supplies a name for the kind of relationship of which this is an instance.
    attribute name { rem_data.enumerated }?,
    (
     ## identifies the active participants in a non-mutual relationship, or all the participants in a mutual one.
     attribute active {
       list { rem_data.pointer+ }
     }?
     | 
       ## supplies a list of participants amongst all of whom the relationship holds equally.
       attribute mutual {
         list { rem_data.pointer+ }
       }?),
    
    ## identifies the passive participants in a non-mutual relationship.
    attribute passive {
      list { rem_data.pointer+ }
    }?,
    empty
  }
rem_residence =
  
  ## describes a person's present or past places of residence. [15.2.2. ]
  element residence {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_sex =
  
  ## specifies the sex of a person. [13.3.2.1. ]
  element sex {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    rem_att.datable.attributes,
    
    ## supplies a coded value for sex
    attribute value {
      list { rem_data.sex+ }
    }?,
    empty
  }
rem_socecStatus =
  
  ## (socio-economic status) contains an informal description of a person's perceived social or economic status. [15.2.2. ]
  element socecStatus {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.naming.attributes,
    
    ## identifies the classification system or taxonomy in use, for example by pointing to a locally-defined taxonomy element or by supplying a URI for an externally-defined system.
    attribute scheme { rem_data.pointer }?,
    
    ## identifies a status code defined within the classification system or taxonomy defined by the scheme attribute.
    attribute code { rem_data.pointer }?,
    empty
  }
rem_state =
  
  ## beschreibt einen Bestandteil einer Standardreferenz mittels der Milestone-Methode. [13.3.1.  13.3.2.1. ]
  element state {
    (rem_state+
     | (rem_model.headLike*,
        rem_model.pLike+,
        (rem_model.noteLike | rem_model.biblLike)*)
     | (rem_model.labelLike
        | rem_model.noteLike
        | rem_model.biblLike)*),
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.typed.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_terrain =
  
  ## contains information about the physical terrain of a place. [13.3.4.3. ]
  element terrain {
    (rem_model.headLike*,
     (rem_model.pLike+ | rem_model.labelLike+),
     (rem_model.noteLike | rem_model.biblLike)*,
     rem_terrain*),
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_trait =
  
  ## contains a description of some status or quality attributed to a person, place, or organization typically, but not necessarily, independent of the volition or action of the holder and usually not at some specific time or for a specific date range. [13.3.1.  13.3.2.1. ]
  element trait {
    (rem_trait+
     | (rem_model.headLike*,
        rem_model.pLike+,
        (rem_model.noteLike | rem_model.biblLike)*)
     | (rem_model.labelLike
        | rem_model.noteLike
        | rem_model.biblLike)*),
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_nym =
  
  ## (canonical name) contains the definition for a canonical name or name component of any kind. [13.3.5. ]
  element nym {
    (rem_model.entryPart*, rem_model.pLike*, rem_nym*),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.sortable.attributes,
    
    ## points to constituent nyms
    attribute parts {
      list { rem_data.pointer+ }
    }?,
    empty
  }
rem_listNym =
  
  ## (list of canonical names) contains a list of nyms, that is, standardized names for any thing. [13.3.5. ]
  element listNym {
    (rem_model.headLike*,
     (rem_nym | rem_listNym)+,
     (rem_relation | rem_listRelation)*),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.declarable.attributes,
    rem_att.sortable.attributes,
    empty
  }
rem_att.global.facs.attributes = rem_att.global.facs.attribute.facs
rem_att.global.facs.attribute.facs =
  
  ## (facsimile) points to all or part of an image which corresponds with the content of the element.
  attribute facs {
    list { rem_data.pointer+ }
  }?
rem_att.global.change.attributes =
  rem_att.global.change.attribute.change
rem_att.global.change.attribute.change =
  
  ## points to one or more change elements documenting a state or revision campaign to which the element bearing this attribute and its children have been assigned by the encoder.
  attribute change {
    list { rem_data.pointer+ }
  }?
rem_att.coordinated.attributes =
  rem_att.coordinated.attribute.start,
  rem_att.coordinated.attribute.ulx,
  rem_att.coordinated.attribute.uly,
  rem_att.coordinated.attribute.lrx,
  rem_att.coordinated.attribute.lry,
  rem_att.coordinated.attribute.points
rem_att.coordinated.attribute.start =
  
  ## indicates the element within a transcription of the text containing at least the start of the writing represented by this zone or surface.
  attribute start { rem_data.pointer }?
rem_att.coordinated.attribute.ulx =
  
  ## gives the x coordinate value for the upper left corner of a rectangular space.
  attribute ulx { rem_data.numeric }?
rem_att.coordinated.attribute.uly =
  
  ## gives the y coordinate value for the upper left corner of a rectangular space.
  attribute uly { rem_data.numeric }?
rem_att.coordinated.attribute.lrx =
  
  ## gives the x coordinate value for the lower right corner of a rectangular space.
  attribute lrx { rem_data.numeric }?
rem_att.coordinated.attribute.lry =
  
  ## gives the y coordinate value for the lower right corner of a rectangular space.
  attribute lry { rem_data.numeric }?
rem_att.coordinated.attribute.points =
  
  ## identifies a two dimensional area within the bounding box specified by the other attributes by means of a series of pairs of numbers, each of which gives the x,y coordinates of a point on a line enclosing the area.
  attribute points {
    list {
      rem_data.point, rem_data.point, rem_data.point, rem_data.point*
    }
  }?
rem_facsimile =
  
  ## contains a representation of some written source in the form of a set of images rather than as transcribed or encoded text. [11.1. ]
  element facsimile {
    (rem_front?,
     (rem_model.graphicLike | rem_surface | rem_surfaceGrp)+,
     rem_back?),
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_sourceDoc =
  
  ## contains a transcription or other representation of a single source document potentially forming part of a dossier génétique or collection of sources. [11.1.  11.2.2. ]
  element sourceDoc {
    (rem_model.global
     | rem_model.graphicLike
     | rem_surface
     | rem_surfaceGrp)+,
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_surface =
  
  ## defines a written surface as a two-dimensional coordinate space, optionally grouping one or more graphic representations of that space, zones of interest within that space, and transcriptions of the writing within them. [11.1.  11.2.2. ]
  element surface {
    ((rem_model.global | rem_model.labelLike | rem_model.graphicLike)*,
     ((rem_zone | rem_line | rem_surface | rem_surfaceGrp),
      rem_model.global*)*),
    rem_att.global.attributes,
    rem_att.coordinated.attributes,
    rem_att.declaring.attributes,
    rem_att.typed.attributes,
    
    ## describes the method by which this surface is or was connected to the main surface
    ## Beispielwerte sind etwa: 1] glued; 2] pinned; 3] sewn
    attribute attachment { rem_data.enumerated }?,
    
    ## indicates whether the surface is attached and folded in such a way as to provide two writing surfaces
    attribute flipping { rem_data.truthValue }?,
    empty
  }
rem_surfaceGrp =
  
  ## defines any kind of useful grouping of written surfaces, for example the recto and verso of a single leaf, which the encoder wishes to treat as a single unit. [11.1. ]
  element surfaceGrp {
    (rem_model.global | rem_surface | rem_surfaceGrp)+,
    rem_att.global.attributes,
    rem_att.declaring.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_zone =
  
  ## defines any two-dimensional area within a surface element. [11.1.  11.2.2. ]
  element zone {
    (text
     | rem_model.graphicLike
     | rem_model.global
     | rem_surface
     | rem_model.linePart)*,
    rem_att.global.attributes,
    rem_att.coordinated.attributes,
    rem_att.typed.attributes,
    
    ## indicates the amount by which this zone has been rotated clockwise, with respect to the normal orientation of the parent surface element as implied by the dimensions given in the msDesc element or by the coordinates of the surface itself. The orientation is expressed in arc degrees.
    [ a:defaultValue = "0" ] attribute rotate { rem_data.count }?,
    empty
  }
rem_addSpan =
  
  ## (added span of text) marks the beginning of a longer sequence of text added by an author, scribe, annotator or corrector (see also add). [11.3.1.4. ]
  element addSpan {
    empty
    >> sch:pattern [
         id = "rem-basel-addSpan-spanTo-constraint-11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "rem-basel-addSpan-spanTo_fr-constraint-12"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:addSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.transcriptional.attributes,
    rem_att.placement.attributes,
    rem_att.typed.attributes,
    rem_att.spanning.attributes,
    empty
  }
rem_damage =
  
  ## contains an area of damage to the text witness. [11.3.3.1. ]
  element damage {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.damaged.attributes,
    empty
  }
rem_damageSpan =
  
  ## (damaged span of text) marks the beginning of a longer sequence of text which is damaged in some way but still legible. [11.3.3.1. ]
  element damageSpan {
    empty
    >> sch:pattern [
         id = "rem-basel-damageSpan-spanTo-constraint-13"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "\x{a}" ~
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "rem-basel-damageSpan-spanTo_fr-constraint-14"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:damageSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.damaged.attributes,
    rem_att.typed.attributes,
    rem_att.spanning.attributes,
    empty
  }
rem_delSpan =
  
  ## (deleted span of text) marks the beginning of a longer sequence of text deleted, marked as deleted, or otherwise signaled as superfluous or spurious by an author, scribe, annotator, or corrector. [11.3.1.4. ]
  element delSpan {
    empty
    >> sch:pattern [
         id = "rem-basel-delSpan-spanTo-constraint-15"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "The @spanTo attribute of "
             sch:name [ ]
             " is required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "rem-basel-delSpan-spanTo_fr-constraint-16"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:delSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@spanTo"
             "L'attribut spanTo est requis."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.transcriptional.attributes,
    rem_att.typed.attributes,
    rem_att.spanning.attributes,
    empty
  }
rem_ex =
  
  ## (editorial expansion) contains a sequence of letters added by an editor or transcriber when expanding an abbreviation. [11.3.1.2. ]
  element ex {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    empty
  }
rem_fw =
  
  ## (forme work) contains a running head (e.g. a header, footer), catchword, or similar material appearing on the current page. [11.6. ]
  element fw {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.placement.attributes,
    
    ## classifies the material encoded according to some useful typology.
    ## Beispielwerte sind etwa: 1] header; 2] footer; 3] pageNum(page number) ; 4] lineNum(line number) ; 5] sig(signature) ; 6] catch(catchword) 
    attribute type { rem_data.enumerated }?,
    empty
  }
rem_handNotes =
  
  ## contains one or more handNote elements documenting the different hands identified within the source texts. [11.3.2.1. ]
  element handNotes { rem_handNote+, rem_att.global.attributes, empty }
rem_handShift =
  
  ## marks the beginning of a sequence of text written in a new hand, or the beginning of a scribal stint. [11.3.2.1. ]
  element handShift {
    empty,
    rem_att.global.attributes,
    rem_att.handFeatures.attributes,
    rem_att.responsibility.attributes,
    
    ## indicates a handNote element describing the hand concerned.
    attribute new { rem_data.pointer }?,
    empty
  }
rem_am =
  
  ## (abbreviation marker) contains a sequence of letters or signs present in an abbreviation which are omitted or replaced in the expanded form of the abbreviation. [11.3.1.2. ]
  element am {
    (text | rem_model.gLike | rem_model.pPart.transcriptional)*,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.editLike.attributes,
    empty
  }
rem_restore =
  
  ## indicates restoration of text to an earlier state by cancellation of an editorial or authorial marking or instruction. [11.3.1.6. ]
  element restore {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.transcriptional.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_space =
  
  ## indicates the location of a significant space in the copy text. [11.5.1. ]
  element space {
    (rem_model.descLike | rem_model.certLike)*,
    rem_att.global.attributes,
    rem_att.dimensions.attributes,
    rem_att.responsibility.attribute.cert,
    rem_att.source.attribute.source,
    
    ## (responsible party) (responsible party) indicates the individual responsible for identifying and measuring the space
    attribute resp {
      list { rem_data.pointer+ }
    }?,
    
    ## (dimension) indicates whether the space is horizontal or vertical.
    attribute dim {
      
      ## the space is horizontal.
      "horizontal"
      | 
        ## the space is vertical.
        "vertical"
    }?,
    empty
  }
rem_subst =
  
  ## (substitution) groups one or more deletions with one or more additions when the combination is to be regarded as a single intervention in the text. [11.3.1.5. ]
  element subst {
    ((rem_add | rem_del | rem_model.milestoneLike)+)
    >> sch:pattern [
         id = "rem-basel-subst-substContents1-constraint-17"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:subst"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "child::tei:add and child::tei:del"
             "\x{a}" ~
             "                  "
             sch:name [ ]
             " must have at least one child add and at least one child del"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.transcriptional.attributes,
    empty
  }
rem_substJoin =
  
  ## (substitution join) identifies a series of possibly fragmented additions, deletions or other revisions on a manuscript that combine to make up a single intervention in the text [11.3.1.5. ]
  element substJoin {
    (rem_model.descLike | rem_model.certLike)*,
    rem_att.global.attributes,
    rem_att.pointing.attributes,
    rem_att.transcriptional.attributes,
    empty
  }
rem_supplied =
  
  ## signifies text supplied by the transcriber or editor for any reason, typically because the original cannot be read because of physical damage or loss to the original. [11.3.3.1. ]
  element supplied {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    
    ## one or more words indicating why the text has had to be supplied, e.g. overbinding, faded-ink, lost-folio, omitted-in-original.
    attribute reason {
      list { rem_data.word+ }
    }?,
    empty
  }
rem_surplus =
  
  ## marks text present in the source which the editor believes to be superfluous or redundant. [11.3.3.1. ]
  element surplus {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    
    ## one or more words indicating why this text is believed to be superfluous, e.g. repeated, interpolated etc.
    attribute reason {
      list { rem_data.word+ }
    }?,
    empty
  }
rem_line =
  
  ## contains the transcription of a topographic line in the source document [11.2.2. ]
  element line {
    (text | rem_model.global | rem_model.gLike | rem_model.linePart)*,
    rem_att.typed.attributes,
    rem_att.global.attributes,
    rem_att.coordinated.attributes,
    empty
  }
rem_listTranspose =
  
  ## supplies a list of transpositions, each of which is indicated at some point in a document typically by means of metamarks. [11.3.4.5. ]
  element listTranspose {
    rem_transpose+, rem_att.global.attributes, empty
  }
rem_metamark =
  
  ## contains or describes any kind of graphic or written signal within a document the function of which is to determine how it should be read rather than forming part of the actual content of the document. [11.3.4.2. ]
  element metamark {
    rem_macro.specialPara,
    rem_att.spanning.attributes,
    rem_att.placement.attributes,
    rem_att.global.attributes,
    
    ## describes the function (for example status, insertion, deletion, transposition) of the mark.
    attribute function { rem_data.word }?,
    
    ## identifies one or more elements to which the function indicated by the metamark applies.
    attribute target {
      list { rem_data.pointer+ }
    }?,
    empty
  }
rem_mod =
  
  ## represents any kind of modification identified within a single document. [11.3.4.1. ]
  element mod {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.transcriptional.attributes,
    rem_att.typed.attributes,
    rem_att.spanning.attributes,
    empty
  }
rem_redo =
  
  ## indicates one or more cancelled interventions in a document which have subsequently been marked as reaffirmed or repeated. [11.3.4.4. ]
  element redo {
    empty,
    rem_att.global.attributes,
    rem_att.spanning.attributes,
    rem_att.transcriptional.attributes,
    
    ## points to one or more elements representing the interventions which are being reasserted.
    attribute target {
      list { rem_data.pointer+ }
    }?,
    empty
  }
rem_retrace =
  
  ## contains a sequence of writing which has been retraced, for example by over-inking, to clarify or fix it. [11.3.4.3. ]
  element retrace {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.spanning.attributes,
    rem_att.transcriptional.attributes,
    empty
  }
rem_transpose =
  
  ## describes a single textual transposition as an ordered list of at least two pointers specifying the order in which the elements indicated should be re-combined. [11.3.4.5. ]
  element transpose {
    (rem_ptr, rem_ptr+), rem_att.global.attributes, empty
  }
rem_undo =
  
  ## indicates one or more marked-up interventions in a document which have subsequently been marked for cancellation. [11.3.4.4. ]
  element undo {
    empty,
    rem_att.global.attributes,
    rem_att.spanning.attributes,
    rem_att.transcriptional.attributes,
    
    ## points to one or more elements representing the interventions which are to be reverted or undone.
    attribute target {
      list { rem_data.pointer+ }
    }?,
    empty
  }
rem_att.msExcerpt.attributes = rem_att.msExcerpt.attribute.defective
rem_att.msExcerpt.attribute.defective =
  
  ## indicates whether the passage being quoted is defective, i.e. incomplete through loss or damage.
  [ a:defaultValue = "false" ]
  attribute defective { rem_data.xTruthValue }?
rem_msDesc =
  
  ## (manuscript description) contains a description of a single identifiable manuscript or other text-bearing object. [10.1. ]
  element msDesc {
    (rem_msIdentifier,
     rem_model.headLike*,
     (rem_model.pLike+
      | (rem_msContents?,
         rem_physDesc?,
         rem_history?,
         rem_additional?,
         rem_msPart*))),
    rem_att.global.attributes,
    rem_att.sortable.attributes,
    rem_att.typed.attributes,
    rem_att.declaring.attributes,
    empty
  }
rem_catchwords =
  
  ## describes the system used to ensure correct ordering of the quires making up a codex or incunable, typically by means of annotations at the foot of the page. [10.3.7. ]
  element catchwords {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_dimensions =
  
  ## contains a dimensional specification. [10.3.4. ]
  element dimensions {
    ((rem_dim | rem_model.dimLike)*)
    >> sch:pattern [
         id = "rem-basel-dimensions-duplicateDim-constraint-12"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:width)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "rem-basel-dimensions-duplicateDim-constraint-13"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:height)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "rem-basel-dimensions-duplicateDim-constraint-14"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:dimensions"
           "\x{a}" ~
           "               "
           sch:report [
             test = "count(tei:depth)> 1"
             "\x{a}" ~
             "The element "
             sch:name [ ]
             " may appear once only\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.dimensions.attributes,
    
    ## indicates which aspect of the object is being measured.
    ## Beispielwerte sind etwa: 1] leaves; 2] ruled; 3] pricked; 4] written; 5] miniatures; 6] binding; 7] box
    attribute type { rem_data.enumerated }?,
    empty
  }
rem_dim =
  
  ## contains any single measurement forming part of a dimensional specification of some sort. [10.3.4. ]
  element dim {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.dimensions.attributes,
    empty
  }
rem_height =
  
  ## contains a measurement measured along the axis at right angles to the bottom of the written surface, i.e. parallel to the spine for a codex or book. [10.3.4. ]
  element height {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.dimensions.attributes,
    empty
  }
rem_depth =
  
  ## contains a measurement measured across the spine of a book or codex, or (for other text-bearing objects) perpendicular to the measurement given by the width element. [10.3.4. ]
  element depth {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.dimensions.attributes,
    empty
  }
rem_width =
  
  ## contains a measurement measured along the axis parallel to the bottom of the written surface, i.e. perpendicular to the spine of a book or codex. [10.3.4. ]
  element width {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.dimensions.attributes,
    empty
  }
rem_heraldry =
  
  ## contains a heraldic formula or phrase, typically found as part of a blazon, coat of arms, etc.  [10.3.8. ]
  element heraldry {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_locus =
  
  ## defines a location within a manuscript or manuscript part, usually as a (possibly discontinuous) sequence of folio references. [10.3.5. ]
  element locus {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.pointing.attributes,
    
    ## identifies the foliation scheme in terms of which the location is being specified by pointing to some foliation element defining it, or to some other equivalent resource.
    attribute scheme { rem_data.pointer }?,
    
    ## specifies the starting point of the location in a normalized form, typically a page number.
    attribute from { rem_data.word }?,
    
    ## specifies the end-point of the location in a normalized form, typically as a page number.
    attribute to { rem_data.word }?,
    empty
  }
rem_locusGrp =
  
  ## groups a number of locations which together form a distinct but discontinuous item within a manuscript or manuscript part, according to a specific foliation. [10.3.5. ]
  element locusGrp {
    rem_locus+,
    rem_att.global.attributes,
    
    ## identifies the foliation scheme in terms of which all the locations contained by the group are specified by pointing to some foliation element defining it, or to some other equivalent resource.
    attribute scheme { rem_data.pointer }?,
    empty
  }
rem_material =
  
  ## contains a word or phrase describing the material of which the object being described is composed. [10.3.2. ]
  element material {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.canonical.attributes,
    empty
  }
rem_objectType =
  
  ## contains a word or phrase describing the type of object being referred to. [10.3.2. ]
  element objectType {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.canonical.attributes,
    empty
  }
rem_origDate =
  
  ## (origin date) contains any form of date, used to identify the date of origin for a manuscript or manuscript part. [10.3.1. ]
  element origDate {
    (text | rem_model.gLike | rem_model.phrase | rem_model.global)*,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_origPlace =
  
  ## (origin place) contains any form of place name, used to identify the place of origin for a manuscript or manuscript part. [10.3.1. ]
  element origPlace {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    rem_att.datable.attributes,
    rem_att.editLike.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_secFol =
  
  ## (second folio) marks the word or words taken from a fixed point in a codex (typically the beginning of the second leaf) in order to provide a unique identifier for it.  [10.3.7. ]
  element secFol {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_signatures =
  
  ## contains discussion of the leaf or quire signatures found within a codex. [10.3.7. ]
  element signatures {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_stamp =
  
  ## contains a word or phrase describing a stamp or similar device. [10.3.3. ]
  element stamp {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.datable.attributes,
    empty
  }
rem_watermark =
  
  ## contains a word or phrase describing a watermark or similar device. [10.3.3. ]
  element watermark {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_msIdentifier =
  
  ## (manuscript identifier) contains the information required to identify the manuscript being described. [10.4. ]
  element msIdentifier {
    ((rem_model.placeNamePart_sequenceOptional,
      rem_institution?,
      rem_repository?,
      rem_collection*,
      rem_idno?),
     (rem_msName | rem_altIdentifier)*)
    >> sch:pattern [
         id = "rem-basel-msIdentifier-msId_minimal-constraint-15"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:msIdentifier"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "not(parent::tei:msPart) and       (local-name(*[1])='idno' or       local-name(*[1])='altIdentifier' or       normalize-space(.)='')"
             "An msIdentifier must contain either a repository or location of some type, or a manuscript name"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    empty
  }
rem_institution =
  
  ## contains the name of an organization such as a university or library, with which a manuscript is identified, generally its holding institution. [10.4. ]
  element institution {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_repository =
  
  ## contains the name of a repository within which manuscripts are stored, possibly forming part of an institution. [10.4. ]
  element repository {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    empty
  }
rem_collection =
  
  ## contains the name of a collection of manuscripts, not necessarily located within a single repository. [10.4. ]
  element collection {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.naming.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_altIdentifier =
  
  ## (alternative identifier) contains an alternative or former structured identifier used for a manuscript, such as a former catalogue number. [10.4. ]
  element altIdentifier {
    (rem_model.placeNamePart_sequenceOptional,
     rem_institution?,
     rem_repository?,
     rem_collection?,
     rem_idno,
     rem_note?),
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_msName =
  
  ## (alternative name) contains any form of unstructured alternative name used for a manuscript, such as an ocellus nominum, or nickname. [10.4. ]
  element msName {
    rem_macro.xtext,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_colophon =
  
  ## contains the colophon of a manuscript item: that is, a statement providing information regarding the date, place, agency, or reason for production of the manuscript. [10.6.1. ]
  element colophon {
    rem_macro.phraseSeq, rem_att.global.attributes, empty
  }
rem_explicit =
  
  ## contains the explicit of a manuscript item, that is, the closing words of the text proper, exclusive of any rubric or colophon which might follow it. [10.6.1. ]
  element explicit {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.msExcerpt.attributes,
    empty
  }
rem_filiation =
  
  ## contains information concerning the manuscript's filiation, i.e. its relationship to other surviving manuscripts of the same text, its protographs, antigraphs and apographs. [10.6.1. ]
  element filiation {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_finalRubric =
  
  ## contains the string of words that denotes the end of a text division, often with an assertion as to its author and title, usually set off from the text itself by red ink, by a different size or type of script, or by some other such visual device. [10.6.1. ]
  element finalRubric {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_incipit =
  
  ## contains the incipit of a manuscript item, that is the opening words of the text proper, exclusive of any rubric which might precede it, of sufficient length to identify the work uniquely; such incipits were, in former times, frequently used a means of reference to a work, in place of a title. [10.6.1. ]
  element incipit {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.msExcerpt.attributes,
    empty
  }
rem_msContents =
  
  ## (manuscript contents) describes the intellectual content of a manuscript or manuscript part, either as a series of paragraphs or as a series of structured manuscript items. [10.6. ]
  element msContents {
    (rem_model.pLike+
     | (rem_summary?,
        rem_textLang?,
        rem_titlePage?,
        (rem_msItem | rem_msItemStruct)*)),
    rem_att.global.attributes,
    rem_att.msExcerpt.attributes,
    
    ## identifies the text types or classifications applicable to this object by pointing to other elements or resources defining the classification concerned. 
    attribute class {
      list { rem_data.pointer+ }
    }?,
    empty
  }
rem_msItem =
  
  ## (manuscript item) describes an individual work or item within the intellectual content of a manuscript or manuscript part. [10.6.1. ]
  element msItem {
    ((rem_locus | rem_locusGrp)*,
     (rem_model.pLike+
      | (rem_model.titlepagePart
         | rem_model.msItemPart
         | rem_model.global)+)),
    rem_att.global.attributes,
    rem_att.msExcerpt.attributes,
    
    ## identifies the text types or classifications applicable to this item by pointing to other elements or resources defining the classification concerned. 
    attribute class {
      list { rem_data.pointer+ }
    }?,
    empty
  }
rem_msItemStruct =
  
  ## (structured manuscript item) contains a structured description for an individual work or item within the intellectual content of a manuscript or manuscript part. [10.6.1. ]
  element msItemStruct {
    ((rem_locus | rem_locusGrp)?,
     (rem_model.pLike+
      | (rem_author*,
         rem_respStmt*,
         rem_title*,
         rem_rubric?,
         rem_incipit?,
         rem_msItemStruct*,
         rem_explicit?,
         rem_finalRubric?,
         rem_colophon*,
         rem_decoNote*,
         rem_listBibl*,
         (rem_bibl | rem_biblStruct)*,
         rem_model.noteLike*,
         rem_textLang?))),
    rem_att.global.attributes,
    rem_att.msExcerpt.attributes,
    
    ## identifies the text types or classifications applicable to this item by pointing to other elements or resources defining the classification concerned.
    attribute class {
      list { rem_data.pointer+ }
    }?,
    empty
  }
rem_rubric =
  
  ## contains the text of any rubric or heading attached to a particular manuscript item, that is, a string of words through which a manuscript signals the beginning of a text division, often with an assertion as to its author and title, which is in some way set off from the text itself, usually in red ink, or by use of different size or type of script, or some other such visual device. [10.6.1. ]
  element rubric {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_summary =
  
  ## contains an overview of the available information concerning some aspect of an item (for example, its intellectual content, history, layout, typography etc.) as a complement or alternative to the more detailed information carried by more specific elements. [10.6. ]
  element summary {
    rem_macro.specialPara, rem_att.global.attributes, empty
  }
rem_physDesc =
  
  ## (physical description) contains a full physical description of a manuscript or manuscript part, optionally subdivided using more specialized elements from the model.physDescPart class. [10.7. ]
  element physDesc {
    (rem_model.pLike*, rem_model.physDescPart_sequenceOptional),
    rem_att.global.attributes,
    empty
  }
rem_objectDesc =
  
  ## contains a description of the physical components making up the object which is being described. [10.7.1. ]
  element objectDesc {
    (rem_model.pLike+ | (rem_supportDesc?, rem_layoutDesc?)),
    rem_att.global.attributes,
    
    ## a short project-specific name identifying the physical form of the carrier, for example as a codex, roll, fragment, partial leaf, cutting etc.
    attribute form { rem_data.enumerated }?,
    empty
  }
rem_supportDesc =
  
  ## (support description) groups elements describing the physical support for the written part of a manuscript. [10.7.1. ]
  element supportDesc {
    (rem_model.pLike+
     | (rem_support?,
        rem_extent?,
        rem_foliation*,
        rem_collation?,
        rem_condition?)),
    rem_att.global.attributes,
    
    ## a short project-defined name for the material composing the majority of the support
    ## Empfohlene Werte sind: 1] paper; 2] parch(parchment) ; 3] mixed
    attribute material {
      
      ##
      "paper"
      | 
        ## (parchment) 
        "parch"
      | 
        ##
        "mixed"
      | xsd:Name
    }?,
    empty
  }
rem_support =
  
  ## contains a description of the materials etc. which make up the physical support for the written part of a manuscript. [10.7.1. ]
  element support {
    rem_macro.specialPara, rem_att.global.attributes, empty
  }
rem_collation =
  
  ## contains a description of how the leaves or bifolia are physically arranged. [10.7.1. ]
  element collation {
    rem_macro.specialPara, rem_att.global.attributes, empty
  }
rem_foliation =
  
  ## describes the numbering system or systems used to count the leaves or pages in a codex. [10.7.1.4. ]
  element foliation {
    rem_macro.specialPara, rem_att.global.attributes, empty
  }
rem_condition =
  
  ## contains a description of the physical condition of the manuscript. [10.7.1.5. ]
  element condition {
    rem_macro.specialPara, rem_att.global.attributes, empty
  }
rem_layoutDesc =
  
  ## (layout description) collects the set of layout descriptions applicable to a manuscript. [10.7.2. ]
  element layoutDesc {
    (rem_model.pLike+ | (rem_summary?, rem_layout+)),
    rem_att.global.attributes,
    empty
  }
rem_layout =
  
  ## describes how text is laid out on the page, including information about any ruling, pricking, or other evidence of page-preparation techniques. [10.7.2. ]
  element layout {
    rem_macro.specialPara,
    rem_att.global.attributes,
    
    ## specifies the number of columns per page
    attribute columns {
      list { rem_data.count, rem_data.count? }
    }?,
    
    ## specifies the number of ruled lines per column
    attribute ruledLines {
      list { rem_data.count, rem_data.count? }
    }?,
    
    ## specifies the number of written lines per column
    attribute writtenLines {
      list { rem_data.count, rem_data.count? }
    }?,
    empty
  }
rem_handDesc =
  
  ## (description of hands) contains a description of all the different kinds of writing used in a manuscript. [10.7.2. ]
  element handDesc {
    (rem_model.pLike+ | (rem_summary?, rem_handNote+)),
    rem_att.global.attributes,
    
    ## specifies the number of distinct hands identified within the manuscript
    attribute hands { rem_data.count }?,
    empty
  }
rem_typeDesc =
  
  ## contains a description of the typefaces or other aspects of the printing of an incunable or other printed source. [10.7.2.1. ]
  element typeDesc {
    (rem_model.pLike+ | (rem_summary?, rem_typeNote+)),
    rem_att.global.attributes,
    empty
  }
rem_scriptDesc =
  
  ## contains a description of the scripts used in a manuscript or similar source. [10.7.2.1. ]
  element scriptDesc {
    (rem_model.pLike+ | (rem_summary?, rem_scriptNote+)),
    rem_att.global.attributes,
    empty
  }
rem_musicNotation =
  
  ## contains description of type of musical notation. [10.7.2. ]
  element musicNotation {
    rem_macro.specialPara, rem_att.global.attributes, empty
  }
rem_decoDesc =
  
  ## (decoration description) contains a description of the decoration of a manuscript, either as a sequence of paragraphs, or as a sequence of topically organized decoNote elements. [10.7.3. ]
  element decoDesc {
    (rem_model.pLike+ | (rem_summary?, rem_decoNote+)),
    rem_att.global.attributes,
    empty
  }
rem_decoNote =
  
  ## (note on decoration) contains a note describing either a decorative component of a manuscript, or a fairly homogenous class of such components. [10.7.3. ]
  element decoNote {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_additions =
  
  ## contains a description of any significant additions found within a manuscript, such as marginalia or other annotations. [10.7.2. ]
  element additions {
    rem_macro.specialPara, rem_att.global.attributes, empty
  }
rem_bindingDesc =
  
  ## (binding description) describes the present and former bindings of a manuscript, either as a series of paragraphs or as a series of distinct binding elements, one for each binding of the manuscript. [10.7.3.1. ]
  element bindingDesc {
    ((rem_model.pLike | rem_decoNote | rem_condition)+ | rem_binding+),
    rem_att.global.attributes,
    empty
  }
rem_binding =
  
  ## contains a description of one binding, i.e. type of covering, boards, etc. applied to a manuscript. [10.7.3.1. ]
  element binding {
    (rem_model.pLike | rem_condition | rem_decoNote)+,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    
    ## specifies whether or not the binding is contemporary with the majority of its contents
    attribute contemporary { rem_data.xTruthValue }?,
    empty
  }
rem_sealDesc =
  
  ## (seal description) describes the seals or other external items attached to a manuscript, either as a series of paragraphs or as a series of distinct seal elements, possibly with additional decoNotes. [10.7.3.2. ]
  element sealDesc {
    (rem_model.pLike+
     | (rem_summary?, (rem_decoNote | rem_seal | rem_condition)+)),
    rem_att.global.attributes,
    empty
  }
rem_seal =
  
  ## contains a description of one seal or similar attachment applied to a manuscript. [10.7.3.2. ]
  element seal {
    (rem_model.pLike | rem_decoNote)+,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    rem_att.datable.attributes,
    
    ## specifies whether or not the seal is contemporary with the item to which it is affixed
    attribute contemporary { rem_data.xTruthValue }?,
    empty
  }
rem_accMat =
  
  ## (accompanying material) contains details of any significant additional material which may be closely associated with the manuscript being described, such as non-contemporaneous documents or fragments bound in with the manuscript at some earlier historical period. [10.7.3.3. ]
  element accMat {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_history =
  
  ## groups elements describing the full history of a manuscript or manuscript part. [10.8. ]
  element history {
    (rem_model.pLike+
     | (rem_summary?, rem_origin?, rem_provenance*, rem_acquisition?)),
    rem_att.global.attributes,
    empty
  }
rem_origin =
  
  ## contains any descriptive or other information concerning the origin of a manuscript or manuscript part. [10.8. ]
  element origin {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.editLike.attributes,
    rem_att.datable.attributes,
    empty
  }
rem_provenance =
  
  ## contains any descriptive or other information concerning a single identifiable episode during the history of a manuscript or manuscript part, after its creation but before its acquisition. [10.8. ]
  element provenance {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.typed.attributes,
    rem_att.responsibility.attributes,
    empty
  }
rem_acquisition =
  
  ## contains any descriptive or other information concerning the process by which a manuscript or manuscript part entered the holding institution. [10.8. ]
  element acquisition {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    empty
  }
rem_additional =
  
  ## groups additional information, combining bibliographic information about a manuscript, or surrogate copies of it with curatorial or administrative information. [10.9. ]
  element additional {
    (rem_adminInfo?, rem_surrogates?, rem_listBibl?),
    rem_att.global.attributes,
    empty
  }
rem_adminInfo =
  
  ## (administrative information) contains information about the present custody and availability of the manuscript, and also about the record description itself. [10.9.1. ]
  element adminInfo {
    (rem_recordHist?,
     rem_availability?,
     rem_custodialHist?,
     rem_model.noteLike?),
    rem_att.global.attributes,
    empty
  }
rem_recordHist =
  
  ## (recorded history) provides information about the source and revision status of the parent manuscript description itself. [10.9.1. ]
  element recordHist {
    (rem_model.pLike+ | (rem_source, rem_change*)),
    rem_att.global.attributes,
    empty
  }
rem_source =
  
  ## describes the original source for the information contained with a manuscript description. [10.9.1.1. ]
  element source {
    rem_macro.specialPara, rem_att.global.attributes, empty
  }
rem_custodialHist =
  
  ## (custodial history) contains a description of a manuscript's custodial history, either as running prose or as a series of dated custodial events. [10.9.1.2. ]
  element custodialHist {
    (rem_model.pLike+ | rem_custEvent+),
    rem_att.global.attributes,
    empty
  }
rem_custEvent =
  
  ## (custodial event) describes a single event during the custodial history of a manuscript. [10.9.1.2. ]
  element custEvent {
    rem_macro.specialPara,
    rem_att.global.attributes,
    rem_att.datable.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_surrogates =
  
  ## contains information about any representations of the manuscript being described which may exist in the holding institution or elsewhere. [10.9. ]
  element surrogates {
    rem_macro.specialPara, rem_att.global.attributes, empty
  }
rem_msPart =
  
  ## (manuscript part) contains information about an originally distinct manuscript or part of a manuscript, now forming part of a composite manuscript. [10.10. ]
  element msPart {
    ((rem_altIdentifier | rem_msIdentifier),
     rem_model.headLike*,
     (rem_model.pLike+
      | (rem_msContents?,
         rem_physDesc?,
         rem_history?,
         rem_additional?,
         rem_msPart*)))
    >> sch:pattern [
         id =
           "rem-basel-msPart-deprecate-altIdentifier-child-constraint-16"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:msPart"
           "\x{a}" ~
           "               "
           sch:report [
             role = "nonfatal"
             test = "child::tei:altIdentifier"
             "WARNING: use of deprecated method — the use of the altIdentifier element as a direct child of the msPart element will be removed from the TEI on 2016-09-09"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    empty
  }
rem_model.rdgLike = rem_rdg
rem_model.rdgPart =
  rem_wit | rem_witStart | rem_witEnd | rem_lacunaStart | rem_lacunaEnd
rem_att.rdgPart.attributes = rem_att.rdgPart.attribute.wit
rem_att.rdgPart.attribute.wit =
  
  ## (witness or witnesses) contains a space-delimited list of one or more sigla indicating the witnesses to this reading beginning or ending at this point.
  attribute wit {
    list { rem_data.pointer+ }
  }?
rem_att.witnessed.attributes = rem_att.witnessed.attribute.wit
rem_att.witnessed.attribute.wit =
  
  ## (witness or witnesses) contains a space-delimited list of one or more pointers indicating the witnesses which attest to a given reading.
  attribute wit {
    list { rem_data.pointer+ }
  }?
rem_att.textCritical.attributes =
  rem_att.responsibility.attributes,
  rem_att.textCritical.attribute.type,
  rem_att.textCritical.attribute.cause,
  rem_att.textCritical.attribute.varSeq,
  rem_att.textCritical.attribute.hand
rem_att.textCritical.attribute.type =
  
  ## classifies the reading according to some useful typology.
  ## Beispielwerte sind etwa: 1] substantive; 2] orthographic
  attribute type { rem_data.enumerated }?
rem_att.textCritical.attribute.cause =
  
  ## classifies the cause for the variant reading, according to any appropriate typology of possible origins.
  ## Beispielwerte sind etwa: 1] homeoteleuton; 2] homeoarchy; 3] paleographicConfusion; 4] haplography; 5] dittography; 6] falseEmendation
  attribute cause { rem_data.enumerated }?
rem_att.textCritical.attribute.varSeq =
  
  ## (variant sequence) provides a number indicating the position of this reading in a sequence, when there is reason to presume a sequence to the variants. 
  attribute varSeq { rem_data.count }?
rem_att.textCritical.attribute.hand =
  
  ## indicates the hand responsible for a particular reading in the witness.
  attribute hand { rem_data.pointer }?
rem_app =
  
  ## (apparatus entry) contains one entry in a critical apparatus, with an optional lemma and usually one or more readings or notes on the relevant passage. [12.1.1. ]
  element app {
    (rem_model.global*,
     (rem_lem, rem_model.global*, (rem_wit, rem_model.global*)?)?,
     ((rem_model.rdgLike,
       rem_model.global*,
       (rem_wit, rem_model.global*)?)
      | (rem_rdgGrp,
         rem_model.global*,
         (rem_wit, rem_model.global*)?))*),
    rem_att.global.attributes,
    
    ## classifies the variation contained in this element according to some convenient typology.
    attribute type { rem_data.enumerated }?,
    
    ## identifies the beginning of the lemma in the base text.
    attribute from { rem_data.pointer }?,
    
    ## identifies the endpoint of the lemma in the base text.
    attribute to { rem_data.pointer }?,
    
    ## (location) indicates the location of the variation, when the location-referenced method of apparatus markup is used.
    attribute loc {
      list { rem_data.word+ }
    }?,
    empty
  }
rem_listApp =
  
  ## (list of apparatus entries) contains a list of apparatus entries. [12.2. ]
  element listApp {
    (rem_model.headLike*, (rem_app | rem_listApp)+),
    rem_att.global.attributes,
    rem_att.sortable.attributes,
    rem_att.declarable.attributes,
    rem_att.typed.attributes,
    empty
  }
rem_lem =
  
  ## (lemma) contains the lemma, or base text, of a textual variation. [12.1. ]
  element lem {
    (text
     | rem_model.gLike
     | rem_model.phrase
     | rem_model.inter
     | rem_model.global
     | rem_model.rdgPart)*,
    rem_att.global.attributes,
    rem_att.textCritical.attributes,
    rem_att.witnessed.attributes,
    empty
  }
rem_rdg =
  
  ## (reading) contains a single reading within a textual variation. [12.1. ]
  element rdg {
    (text
     | rem_model.gLike
     | rem_model.phrase
     | rem_model.inter
     | rem_model.global
     | rem_model.rdgPart)*,
    rem_att.global.attributes,
    rem_att.textCritical.attributes,
    rem_att.witnessed.attributes,
    empty
  }
rem_rdgGrp =
  
  ## (reading group) within a textual variation, groups two or more readings perceived to have a genetic relationship or other affinity. [12.1. ]
  element rdgGrp {
    (((rem_rdgGrp, rem_wit?)
      | ((rem_lem, rem_wit?)?, (rem_model.rdgLike, rem_wit?))*)+)
    >> sch:pattern [
         id = "rem-basel-rdgGrp-only1lem-constraint-18"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:rdgGrp"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(tei:lem) < 2"
             "Only one <lem> element may appear within a <rdgGrp>"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    rem_att.global.attributes,
    rem_att.textCritical.attributes,
    empty
  }
rem_witDetail =
  
  ## (witness detail) gives further information about a particular witness, or witnesses, to a particular reading. [12.1. ]
  element witDetail {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.placement.attributes,
    rem_att.responsibility.attributes,
    rem_att.pointing.attributes,
    
    ## (witnesses) indicates the sigil or sigla identifying the witness or witnesses to which the detail refers.
    attribute wit {
      list { rem_data.pointer+ }
    },
    
    ## describes the type of information given about the witness.
    attribute type { rem_data.enumerated }?,
    empty
  }
rem_wit =
  
  ## contains a list of one or more sigla of witnesses attesting a given reading, in a textual variation. [12.1.4. ]
  element wit {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.rdgPart.attributes,
    empty
  }
rem_listWit =
  
  ## (witness list) lists definitions for all the witnesses referred to by a critical apparatus, optionally grouped hierarchically. [12.1. ]
  element listWit {
    (rem_model.headLike?, (rem_witness | rem_listWit)+),
    rem_att.global.attributes,
    rem_att.sortable.attributes,
    empty
  }
rem_witness =
  
  ## contains either a description of a single witness referred to within the critical apparatus, or a list of witnesses which is to be referred to by a single sigil. [12.1. ]
  element witness {
    rem_macro.limitedContent,
    rem_att.global.attributes,
    rem_att.sortable.attributes,
    empty
  }
rem_witStart =
  
  ## (fragmented witness start) indicates the beginning, or resumption, of the text of a fragmentary witness. [12.1.5. ]
  element witStart {
    empty, rem_att.global.attributes, rem_att.rdgPart.attributes, empty
  }
rem_witEnd =
  
  ## (fragmented witness end) indicates the end, or suspension, of the text of a fragmentary witness. [12.1.5. ]
  element witEnd {
    empty, rem_att.global.attributes, rem_att.rdgPart.attributes, empty
  }
rem_lacunaStart =
  
  ## indicates the beginning of a lacuna in the text of a mostly complete textual witness. [12.1.5. ]
  element lacunaStart {
    empty, rem_att.global.attributes, rem_att.rdgPart.attributes, empty
  }
rem_lacunaEnd =
  
  ## indicates the end of a lacuna in a mostly complete textual witness. [12.1.5. ]
  element lacunaEnd {
    empty, rem_att.global.attributes, rem_att.rdgPart.attributes, empty
  }
rem_variantEncoding =
  
  ## gibt die Methode an, nach der die textkritischen Varianten kodiert sind. [12.1.1. ]
  element variantEncoding {
    empty,
    rem_att.global.attributes,
    
    ## gibt die Methode an, nach der textkritische Apparat kodiert ist.
    attribute method {
      
      ## apparatus uses line numbers or other canonical reference scheme referenced in a base text.
      "location-referenced"
      | 
        ## apparatus indicates the precise locations of the beginning and ending of each lemma relative to a base text.
        "double-end-point"
      | 
        ## alternate readings of a passage are given in parallel in the text; no notion of a base text is necessary.
        "parallel-segmentation"
    },
    
    ## gibt an, ob der Apparat innerhalb oder außerhalb des Textes erscheint.
    attribute location {
      
      ## apparatus appears within the running text.
      "internal"
      | 
        ## apparatus appears outside the base text.
        "external"
    }
    >> sch:pattern [
         id =
           "rem-basel-variantEncoding-location-variantEncodingLocation-constraint-6"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:variantEncoding"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "(@location != 'external') or (@method != 'parallel-segmentation')"
             "\x{a}" ~
             '              The @location value "external" is inconsistent with the\x{a}' ~
             "              parallel-segmentation method of apparatus markup."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    empty
  }
rem_e =
  
  ## Ein Buchungsposten
  element ns2:e {
    rem_macro.paraContent,
    rem_att.declaring.attributes,
    rem_att.fragmentable.attributes,
    rem_att.global.attributes,
    rem_att.transcriptional.attributes,
    empty
  }
rem_sum =
  
  ## Summe: Abschnittsweise und Seitenweise
  element ns2:sum {
    rem_att.declaring.attributes,
    rem_att.fragmentable.attributes,
    rem_att.global.attributes,
    rem_att.transcriptional.attributes,
    
    ## Gibt an, über welchen Bereich, die Summe gezogen wird, z.B. bk_page, bk_account
    ##attribute scope { text }?,
    empty
  }
rem_b =
  
  ## Betrag
  element ns2:b {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.segLike.attributes,
    empty
  }
rem_d =
  
  ## Maßangabe in Pfennigen
  element ns2:d {
    rem_macro.phraseSeq, rem_att.measurement.attributes, empty
  }
rem_lbd =
  
  ## Maßangabe in Pfund Pfennige
  element ns2:lbd {
    rem_macro.phraseSeq, rem_att.measurement.attributes, empty
  }
rem_wä =
  
  ## Maßangaben von Geldbeträgen in beliebigen Währungs-/Recheneinheiten (zu spezifizieren über das Attribut @unit)
  element ns2:wä {
    rem_macro.phraseSeq, rem_att.measurement.attributes, empty
  }
rem_sup =
  
  ##
  element ns2:sup { rem_macro.phraseSeq }
rem_klammer =
  
  ## Eine Klammer, die mehrere Buchungsposten zusammenfaßt.
  element ns2:klammer {
    (rem_model.pLike+ | rem_div*),
    rem_att.global.attributes,
    rem_att.placement.attributes,
    rem_att.spanning.attributes,
    
    ## Die Funktion der Klammer (aggregierend, wiederholend)
    ## Beispielwerte sind etwa: 1] repeat; 2]  aggregate
    attribute function { rem_data.word }?,
    
    ## Das Ziel der Klammer (falls nicht als r:b im Element enthalten)
    attribute target { rem_data.pointer }?,
    empty
  }
rem_sh =
  
  ## Mengenangabe in Schilling à 12 Pfennige
  element ns2:sh {
    rem_macro.phraseSeq,
    rem_att.global.attributes,
    rem_att.measurement.attributes,
    empty
  }
rem_price =
  
  ## Preisangaben/Währungskonversionen
  element ns2:price {
    rem_macro.paraContent,
    rem_att.global.attributes,
    rem_att.segLike.attributes,
    empty
  }
start = rem_TEI | rem_teiCorpus
